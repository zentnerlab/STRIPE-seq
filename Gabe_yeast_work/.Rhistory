p <- plot_sequence_logo(seqs, ncol = 3) +
ggplot2::theme(text = element_text(size = 5))
ggsave("tss_seq_logo.pdf", plot = p, device = cairo_pdf, height = 1, width = 2)
seqs <- tss_sequences(exp, genome_assembly = assembly, threshold = 3, quantiles = 5, samples = "S288C_100ng_1")
p <- plot_sequence_logo(seqs, ncol = 3) +
ggplot2::theme(text = element_text(size = 5))
ggsave("tss_seq_logo_quintiles.pdf", plot = p, device = cairo_pdf, height = 1, width = 2)
# Generate TSS color plot
seqs <- tss_sequences(exp, genome_assembly = assembly, threshold = 3, samples = "S288C_100ng_1")
p <- plot_sequence_colormap(seqs, ncol = 3) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tss_seq_colormap.png", plot = p, device = "png", type = "cairo", height = 2.5, width = 2)
# Assess TSS dinucleotide frequencies
frequencies <- dinucleotide_frequencies(exp, genome_assembly = assembly, threshold = 3, samples = "S288C_100ng_1")
p <- plot_dinucleotide_frequencies(frequencies, ncol = 3) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tss_dinucleotide_frequencies.pdf", plot = p, device = cairo_pdf, height = 1.7, width = 2.5)
# Plot distance of dominant TSS to annotated start codon
dominant <- dominant_tss(exp, threshold = 3, feature_type = "geneId", samples = "S288C_100ng_1")
p <- plot_dominant_tss(dominant, upstream = 500, downstream = 500)
ggsave("dominant_tss.pdf", plot = p, device = cairo_pdf, height = 4, width = 4)
# Plot hypothetical maximum 5'UTR length
max <- max_utr(exp, threshold = 3, feature_type = "geneId", samples = "S288C_100ng_1")
p <- plot_max_utr(max)
ggsave("max_utr.pdf", plot = p, device = cairo_pdf, height = 4, width = 4)
seqs <- tss_sequences(exp, genome_assembly = assembly, threshold = 3, quantiles = 5, samples = "S288C_100ng_1")
p <- plot_sequence_logo(seqs, ncol = 3) +
ggplot2::theme(text = element_text(size = 5))
ggsave("tss_seq_logo_quantiles.pdf", plot = p, device = cairo_pdf, height = 5, width = 2)
seqs <- tss_sequences(exp, genome_assembly = assembly, threshold = 3, quantiles = 5, samples = "S288C_100ng_1", distance = 25)
p <- plot_sequence_logo(seqs, ncol = 3) +
ggplot2::theme(text = element_text(size = 5))
ggsave("tss_seq_logo_quantiles.pdf", plot = p, device = cairo_pdf, height = 5, width = 2)
seqs <- tss_sequences(exp, genome_assembly = assembly, threshold = 3, quantiles = 10, samples = "S288C_100ng_1")
p <- plot_sequence_logo(seqs, ncol = 3) +
ggplot2::theme(text = element_text(size = 5))
ggsave("tss_seq_logo_quantiles.pdf", plot = p, device = cairo_pdf, height = 5, width = 2)
seqs <- tss_sequences(exp, genome_assembly = assembly, threshold = 3, quantiles = 5, samples = "S288C_100ng_1")
p <- plot_sequence_logo(seqs, ncol = 3) +
ggplot2::theme(text = element_text(size = 5))
ggsave("tss_seq_logo_quantiles.pdf", plot = p, device = cairo_pdf, height = 5, width = 2)
CAGE_TSRs <- map(list.files("../yeast_data/CAGE_TSRs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "start", end.field = "end"))
names(CAGE_TSRs) <- c("SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")
CAGE_TSRs
?pc
test <- pc(S288C_TSRs, CAGE_TSRs)
grl3 <- c(S288C_TSRs, CAGE_TSRs)
grl3
View(grl3)
# Normalize TSR counts
exp <- count_normalization(exp, data_type = "tsr", threshold = 3)
# Generate a hierarchically clustered heatmap
p <- plot_correlation(exp, data_type = "tsr", correlation_plot = "hierarchical", col = viridis(256))
pdf("tsr_correlation_hierarchical.pdf", height = 3.5, width = 4)
p
dev.off()
# Read in all TSSs and TSRs
exp <- tsr_explorer(S288C_TSSs, grl3)
# Normalize TSR counts
exp <- count_normalization(exp, data_type = "tsr", threshold = 3)
# Generate a hierarchically clustered heatmap
p <- plot_correlation(exp, data_type = "tsr", correlation_plot = "hierarchical", col = viridis(256))
pdf("tsr_correlation_hierarchical.pdf", height = 3.5, width = 4)
p
dev.off()
# Generate a hierarchically clustered heatmap
p <- plot_correlation(exp, data_type = "tsr", correlation_plot = "hierarchical", col = viridis(256))
pdf("tsr_correlation_hierarchical.pdf", height = 7, width = 7)
p
dev.off()
# Generate a hierarchically clustered heatmap
p <- plot_correlation(exp, data_type = "tsr", correlation_plot = "hierarchical", col = viridis(256), log2_transform = TRUE)
pdf("tsr_correlation_hierarchical.pdf", height = 7, width = 7)
p
dev.off()
# Generate a hierarchically clustered heatmap
p <- plot_correlation(exp, data_type = "tsr", correlation_plot = "hierarchical", col = viridis(256), correlation_metric = spearman)
pdf("tsr_correlation_hierarchical.pdf", height = 7, width = 7)
p
dev.off()
# Generate a hierarchically clustered heatmap
p <- plot_correlation(exp, data_type = "tsr", correlation_plot = "hierarchical", col = viridis(256), correlation_metric = "spearman")
pdf("tsr_correlation_hierarchical.pdf", height = 7, width = 7)
p
dev.off()
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = c("nTAGs", "nTSSs"), log2_transform = TRUE, ncol = 2) +
ggplot2::theme(text = element_text(size = 6))
# Annotate TSRs
exp <- annotate_features(exp, annotation_file = annotation, data_type = "tsr", feature_type = "transcript")
# Determine TSR distribution relative to genomic features
tsr_distribution <- genomic_distribution(exp, data_type = "tsr", samples = "S288C_100ng_1")
p <- plot_genomic_distribution(tsr_distribution) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_genomic_distribution.png", plot = p, device = "png", type = "cairo", height = 1.5, width = 4)
tsr_distribution <- genomic_distribution(exp, data_type = "tsr", quantiles = 5, samples = "S288C_100ng_1")
p <- plot_genomic_distribution(tsr_distribution) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_genomic_distribution_quantiles.png", plot = p, device = "png", type = "cairo", height = 1.5, width = 4)
tsr_distribution <- genomic_distribution(exp, data_type = "tsr", threshold = 3, quantiles = 5, samples = "S288C_100ng_1")
p <- plot_genomic_distribution(tsr_distribution) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_genomic_distribution_quantiles.png", plot = p, device = "png", type = "cairo", height = 1.5, width = 4)
p <- plot_tsr_metric(exp, tsr_metrics = c("nTAGs", "nTSSs"), log2_transform = TRUE, ncol = 2) +
ggplot2::theme(text = element_text(size = 6))
warnings()
ggsave("tsr_metrics.pdf", plot = p, device = cairo_pdf, width = 4, height = 2)
p
plot_tsr_metric(exp, tsr_metrics = c("nTAGs", "nTSSs"), log2_transform = TRUE, ncol = 2)
p <- plot_tsr_metric(exp, tsr_metrics = c("nTSSs"), log2_transform = TRUE, ncol = 2) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_metrics.pdf", plot = p, device = cairo_pdf, width = 4, height = 2)
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = c("nTSSs"), log2_transform = TRUE, ncol = 2) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_metrics.pdf", plot = p, device = cairo_pdf, width = 7, height = 7)
# Normalize TSR counts
exp <- count_normalization(exp, data_type = "tsr", threshold = 3, n_samples = 3)
# Generate a hierarchically clustered heatmap
p <- plot_correlation(exp, data_type = "tsr", correlation_plot = "hierarchical", col = viridis(256), correlation_metric = "spearman")
pdf("tsr_correlation_hierarchical.pdf", height = 7, width = 7)
p
dev.off()
# Normalize TSR counts
exp <- count_normalization(exp, data_type = "tsr", threshold = 3, n_samples = 13)
p <- plot_correlation(exp, data_type = "tsr", correlation_plot = "hierarchical", col = viridis(256), correlation_metric = "spearman")
pdf("tsr_correlation_hierarchical.pdf", height = 7, width = 7)
p
dev.off()
# Normalize TSR counts
exp <- count_normalization(exp, data_type = "tsr", threshold = 3, n_samples = 1)
?pc
YPD_TSSs <- map(list.files("../yeast_data/YPD_TSSs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "TSS", end.field = "TSS"))
names(YPD_TSSs) <- c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3")
diamide_TSSs <- map(list.files("../yeast_data/diamide_TSSs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "TSS", end.field = "TSS"))
names(diamide_TSSs) <- c("S288C_diamide_100ng_1","S288C_diamide_100ng_2","S288C_diamide_100ng_3")
YPD_diamide_TSSs <- pc(YPD_TSSs$S288C_100ng_1,YPD_TSSs$S288C_100ng_2,YPD_TSSs$S288C_100ng_3,
diamide_TSSs$S288C_diamide_100ng_1,diamide_TSSs$S288C_diamide_100ng_2,diamide_TSSs$S288C_diamide_100ng_3)
YPD_diamide_TSSs <- c(YPD_TSSs$S288C_100ng_1,YPD_TSSs$S288C_100ng_2,YPD_TSSs$S288C_100ng_3,
diamide_TSSs$S288C_diamide_100ng_1,diamide_TSSs$S288C_diamide_100ng_2,diamide_TSSs$S288C_diamide_100ng_3)
YPD_diamide_TSSs
diamide_TSSs
# YPD vs. diamide STRIPE-seq TSSs
YPD_diamide_TSSs <- c("YPD_TSSs$S288C_100ng_1",YPD_TSSs$S288C_100ng_2,YPD_TSSs$S288C_100ng_3,
diamide_TSSs$S288C_diamide_100ng_1,diamide_TSSs$S288C_diamide_100ng_2,diamide_TSSs$S288C_diamide_100ng_3)
YPD_diamide_TSSs
YPD_diamide_TSSs <- c(YPD_TSSs$S288C_100ng_1,YPD_TSSs$S288C_100ng_2,YPD_TSSs$S288C_100ng_3,
diamide_TSSs$S288C_diamide_100ng_1,diamide_TSSs$S288C_diamide_100ng_2,diamide_TSSs$S288C_diamide_100ng_3)
YPD_diamide_TSSs
YPD_diamide_TSSs <- c(YPD_TSSs$S288C_100ng_1,YPD_TSSs$S288C_100ng_2,YPD_TSSs$S288C_100ng_3,
diamide_TSSs$S288C_diamide_100ng_1,diamide_TSSs$S288C_diamide_100ng_2,diamide_TSSs$S288C_diamide_100ng_3)
regroup(YPD_diamide_TSSs, names(YPD_diamide_TSSs))
GRangesList(YPD_TSSs$S288C_100ng_1,YPD_TSSs$S288C_100ng_2,YPD_TSSs$S288C_100ng_3,diamide_TSSs$S288C_diamide_100ng_1,diamide_TSSs$S288C_diamide_100ng_2,diamide_TSSs$S288C_diamide_100ng_3)
YPD_diamide_TSSs <- c(YPD_TSSs$S288C_100ng_1,YPD_TSSs$S288C_100ng_2,YPD_TSSs$S288C_100ng_3,
diamide_TSSs$S288C_diamide_100ng_1,diamide_TSSs$S288C_diamide_100ng_2,diamide_TSSs$S288C_diamide_100ng_3)
regroup(YPD_diamide_TSSs, names(YPD_diamide_TSSs))
YPD_diamide_TSSs <- GRangesList(YPD_TSSs$S288C_100ng_1,YPD_TSSs$S288C_100ng_2,YPD_TSSs$S288C_100ng_3,
diamide_TSSs$S288C_diamide_100ng_1,diamide_TSSs$S288C_diamide_100ng_2,diamide_TSSs$S288C_diamide_100ng_3)
regroup(YPD_diamide_TSSs, names(YPD_diamide_TSSs))
YPD_diamide_TSSs
setwd("/Users/gzentner/Desktop/tsrexplorer/yeast/STRIPE-seq/Gabe_yeast_work/")
####################
### Read in TSSs ###
####################
# STRIPE-seq YPD TSSs
YPD_TSSs <- map(list.files("../yeast_data/YPD_TSSs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "TSS", end.field = "TSS"))
names(YPD_TSSs) <- c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3")
# STRIPE-seq diamide TSSs
diamide_TSSs <- map(list.files("../yeast_data/diamide_TSSs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "TSS", end.field = "TSS"))
names(diamide_TSSs) <- c("S288C_diamide_100ng_1","S288C_diamide_100ng_2","S288C_diamide_100ng_3")
names(YPD_diamide_TSSs)
YPD_TSSs$S288C_100ng_1
?GRangesList
names(YPD_TSSs)
YPD_diamide_TSSs <- GRangesList(YPD_TSSs$S288C_100ng_1,YPD_TSSs$S288C_100ng_2,YPD_TSSs$S288C_100ng_3,
diamide_TSSs$S288C_diamide_100ng_1,diamide_TSSs$S288C_diamide_100ng_2,diamide_TSSs$S288C_diamide_100ng_3)
YPD_diamide_TSSs
YPD_diamide_TSSs <- GRangesList(YPD_TSSs$S288C_100ng_1,YPD_TSSs$S288C_100ng_2,YPD_TSSs$S288C_100ng_3,
diamide_TSSs$S288C_diamide_100ng_1,diamide_TSSs$S288C_diamide_100ng_2,diamide_TSSs$S288C_diamide_100ng_3)
names(YPD_diamide_TSSs) <- c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_diamide_100ng_1","S288C_diamide_100ng_2","S288C_diamide_100ng_3")
YPD_diamide_TSSs
YPD_TSSs
names(YPD_diamide_TSSs) <- c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_diamide_100ng_1","S288C_diamide_100ng_2","S288C_diamide_100ng_3")
YPD_diamide_TSSs
YPD_TSSs$S288C_100ng_1
YPD_TSSs
View(YPD_diamide_TSSs)
exp <- tsr_explorer(YPD_diamide_TSSs)
# Normalize counts
exp <- count_normalization(exp, data_type = "tss", n_samples = 1, threshold = 3)
class(YPD_TSSs)
class(YPD_diamide_TSSs)
YPD_diamide_TSSs <- list(YPD_TSSs$S288C_100ng_1,YPD_TSSs$S288C_100ng_2,YPD_TSSs$S288C_100ng_3,
diamide_TSSs$S288C_diamide_100ng_1,diamide_TSSs$S288C_diamide_100ng_2,diamide_TSSs$S288C_diamide_100ng_3)
YPD_diamide_TSSs
YPD_diamide_TSSs <- list(YPD_TSSs$S288C_100ng_1,YPD_TSSs$S288C_100ng_2,YPD_TSSs$S288C_100ng_3,
diamide_TSSs$S288C_diamide_100ng_1,diamide_TSSs$S288C_diamide_100ng_2,diamide_TSSs$S288C_diamide_100ng_3)
names(YPD_diamide_TSSs) <- c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_diamide_100ng_1","S288C_diamide_100ng_2","S288C_diamide_100ng_3")
YPD_diamide_TSSs
# Read in all TSSs and TSRs
exp <- tsr_explorer(YPD_diamide_TSSs)
# Normalize counts
exp <- count_normalization(exp, data_type = "tss", n_samples = 1, threshold = 3)
# Generate a hierarchically clustered heatmap
p <- plot_correlation(exp, data_type = "tss", correlation_plot = "hierarchical", col = viridis(256))
pdf("tss_correlation_hierarchical.pdf", height = 3.5, width = 4)
p
dev.off()
# STRIPE-seq YPD TSRs
YPD_TSRs <- map(list.files("../yeast_data/YPD_TSRs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "start", end.field = "end"))
names(YPD_TSRs) <- c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3")
# STRIPE-seq diamide TSRs
diamide_TSRs <- map(list.files("../yeast_data/diamide_TSRs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "TSS", end.field = "TSS"))
names(diamide_TSRs) <- c("S288C_diamide_100ng_1","S288C_diamide_100ng_2","S288C_diamide_100ng_3")
# SLIC-CAGE and nanoCAGE TSRs
CAGE_TSRs <- map(list.files("../yeast_data/CAGE_TSRs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "start", end.field = "end"))
names(CAGE_TSRs) <- c("SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")
diamide_TSRs <- map(list.files("../yeast_data/diamide_TSRs//", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "TSS", end.field = "TSS"))
# STRIPE-seq diamide TSRs
diamide_TSRs <- map(list.files("../yeast_data/diamide_TSRs//", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "start", end.field = "end"))
names(diamide_TSRs) <- c("S288C_diamide_100ng_1","S288C_diamide_100ng_2","S288C_diamide_100ng_3")
# SLIC-CAGE and nanoCAGE TSRs
CAGE_TSRs <- map(list.files("../yeast_data/CAGE_TSRs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "start", end.field = "end"))
names(CAGE_TSRs) <- c("SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")
# Generate various composite TSR lists if desired
# YPD vs. diamide STRIPE-seq TSRs
YPD_diamide_TSRs <- list(YPD_TSRs$S288C_100ng_1,YPD_TSRs$S288C_100ng_2,YPD_TSRs$S288C_100ng_3,
diamide_TSRs$S288C_diamide_100ng_1,diamide_TSRs$S288C_diamide_100ng_2,diamide_TSRs$S288C_diamide_100ng_3)
names(YPD_diamide_TSRs) <- c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_diamide_100ng_1","S288C_diamide_100ng_2","S288C_diamide_100ng_3")
YPD_diamide_TSRs
# Read in all TSSs and TSRs
exp <- tsr_explorer(YPD_diamide_TSSs,YPD_diamide_TSRs)
# Normalize counts
exp <- count_normalization(exp, data_type = "tss", n_samples = 1, threshold = 3)
# Normalize TSR counts
exp <- count_normalization(exp, data_type = "tsr", threshold = 3, n_samples = 1)
# Generate a hierarchically clustered heatmap
p <- plot_correlation(exp, data_type = "tsr", correlation_plot = "hierarchical", col = viridis(256), correlation_metric = "spearman")
pdf("tsr_correlation_hierarchical.pdf", height = 7, width = 7)
p
dev.off()
p <- plot_correlation(exp, data_type = "tsr", correlation_plot = "hierarchical", col = viridis(256), correlation_metric = "pearson")
pdf("tsr_correlation_hierarchical.pdf", height = 7, width = 7)
p
dev.off()
# Generate a hierarchically clustered heatmap
p <- plot_correlation(exp, data_type = "tss", correlation_plot = "hierarchical", col = viridis(256), correlation_metric = "spearman")
pdf("tss_correlation_hierarchical.pdf", height = 3.5, width = 4)
p
dev.off()
# Pull latest version of tsrexplorer
devtools::install_github("rpolicastro/tsrexplorer", ref = "normalization", force = TRUE)
remove.packages("tsrexplorer")
# Pull latest version of tsrexplorer
devtools::install_github("rpolicastro/tsrexplorer", ref = "normalization", force = TRUE)
CAGE_TSSs <- map(list.files("../yeast_data/CAGE_TSSs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "TSS", end.field = "TSS"))
names(CAGE_TSSs) <- c("SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")
library(tsrexplorer)
library(tidyverse)
library(GenomicRanges)
library(viridis)
CAGE_TSSs <- map(list.files("../yeast_data/CAGE_TSSs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "TSS", end.field = "TSS"))
names(CAGE_TSSs) <- c("SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")
# STRIPE-seq YPD TSSs
YPD_TSSs <- map(list.files("../yeast_data/YPD_TSSs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "TSS", end.field = "TSS"))
names(YPD_TSSs) <- c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3")
# STRIPE-seq diamide TSSs
diamide_TSSs <- map(list.files("../yeast_data/diamide_TSSs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "TSS", end.field = "TSS"))
names(diamide_TSSs) <- c("S288C_diamide_100ng_1","S288C_diamide_100ng_2","S288C_diamide_100ng_3")
# SLIC-CAGE and nanoCAGE TSSs
CAGE_TSSs <- map(list.files("../yeast_data/CAGE_TSSs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "TSS", end.field = "TSS"))
names(CAGE_TSSs) <- c("SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")
# 100 ng STRIPE-seq, SLIC-CAGE, and nanoCAGE TSSs for looking at method correlation
STRIPE_100ng_SLIC_CAGE_nanoCAGE_TSSs <- list(YPD_TSSs$S288C_100ng_1,YPD_TSSs$S288C_100ng_2,YPD_TSSs$S288C_100ng_3,
CAGE_TSSs$SLIC_CAGE_100ng_1,CAGE_TSSs$SLIC_CAGE_100ng_2,
CAGE_TSSs$nanoCAGE_500ng_1,CAGE_TSSs$nanoCAGE_500ng_2,
CAGE_TSSs$nanoCAGE_25ng_1,CAGE_TSSs$nanoCAGE_25ng_2)
names(STRIPE_100ng_SLIC_CAGE_nanoCAGE_TSSs) <- c("S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")
# Read in all TSSs and TSRs
exp <- tsr_explorer(STRIPE_100ng_SLIC_CAGE_nanoCAGE_TSSs)
# Normalize counts
exp <- count_normalization(exp, data_type = "tss", n_samples = 1, threshold = 3)
p <- plot_correlation(exp, data_type = "tss", correlation_plot = "hierarchical", col = viridis(256), correlation_metric = "spearman")
pdf("tss_correlation_hierarchical.pdf", height = 3.5, width = 4)
p
dev.off()
library(tsrexplorer)
library(tidyverse)
library(GenomicRanges)
library(viridis)
# Pull latest version of tsrexplorer
# devtools::install_github("rpolicastro/tsrexplorer", ref = "normalization", force = TRUE)
setwd("/Users/gzentner/Desktop/tsrexplorer/yeast/STRIPE-seq/Gabe_yeast_work/")
####################
### Read in TSSs ###
####################
# STRIPE-seq YPD TSSs
YPD_TSSs <- map(list.files("../yeast_data/YPD_TSSs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "TSS", end.field = "TSS"))
names(YPD_TSSs) <- c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3")
# STRIPE-seq diamide TSSs
diamide_TSSs <- map(list.files("../yeast_data/diamide_TSSs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "TSS", end.field = "TSS"))
names(diamide_TSSs) <- c("S288C_diamide_100ng_1","S288C_diamide_100ng_2","S288C_diamide_100ng_3")
# SLIC-CAGE and nanoCAGE TSSs
CAGE_TSSs <- map(list.files("../yeast_data/CAGE_TSSs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "TSS", end.field = "TSS"))
names(CAGE_TSSs) <- c("SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")
# Generate various composite TSS as necessary
# 100 ng STRIPE-seq, SLIC-CAGE, and nanoCAGE TSSs for looking at method correlation
STRIPE_100ng_SLIC_CAGE_nanoCAGE_TSSs <- list(YPD_TSSs$S288C_100ng_1,YPD_TSSs$S288C_100ng_2,YPD_TSSs$S288C_100ng_3,
CAGE_TSSs$SLIC_CAGE_100ng_1,CAGE_TSSs$SLIC_CAGE_100ng_2,
CAGE_TSSs$nanoCAGE_500ng_1,CAGE_TSSs$nanoCAGE_500ng_2,
CAGE_TSSs$nanoCAGE_25ng_1,CAGE_TSSs$nanoCAGE_25ng_2)
names(STRIPE_100ng_SLIC_CAGE_nanoCAGE_TSSs) <- c("S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")
# YPD vs. diamide STRIPE-seq TSSs
YPD_diamide_TSSs <- list(YPD_TSSs$S288C_100ng_1,YPD_TSSs$S288C_100ng_2,YPD_TSSs$S288C_100ng_3,
diamide_TSSs$S288C_diamide_100ng_1,diamide_TSSs$S288C_diamide_100ng_2,diamide_TSSs$S288C_diamide_100ng_3)
names(YPD_diamide_TSSs) <- c("S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_diamide_100ng_1","S288C_diamide_100ng_2","S288C_diamide_100ng_3")
####################
### Read in TSRs ###
####################
# STRIPE-seq YPD TSRs
YPD_TSRs <- map(list.files("../yeast_data/YPD_TSRs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "start", end.field = "end"))
names(YPD_TSRs) <- c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3")
# STRIPE-seq diamide TSRs
diamide_TSRs <- map(list.files("../yeast_data/diamide_TSRs//", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "start", end.field = "end"))
names(diamide_TSRs) <- c("S288C_diamide_100ng_1","S288C_diamide_100ng_2","S288C_diamide_100ng_3")
# SLIC-CAGE and nanoCAGE TSRs
CAGE_TSRs <- map(list.files("../yeast_data/CAGE_TSRs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "start", end.field = "end"))
names(CAGE_TSRs) <- c("SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")
# Generate various composite TSR lists if desired
# 100 ng STRIPE-seq, SLIC-CAGE, and nanoCAGE TSSs for looking at method correlation
STRIPE_100ng_SLIC_CAGE_nanoCAGE_TSRs <- list(YPD_TSRs$S288C_100ng_1,YPD_TSRs$S288C_100ng_2,YPD_TSRs$S288C_100ng_3,
CAGE_TSRs$SLIC_CAGE_100ng_1,CAGE_TSRs$SLIC_CAGE_100ng_2,
CAGE_TSRs$nanoCAGE_500ng_1,CAGE_TSRs$nanoCAGE_500ng_2,
CAGE_TSRs$nanoCAGE_25ng_1,CAGE_TSRs$nanoCAGE_25ng_2)
names(STRIPE_100ng_SLIC_CAGE_nanoCAGE_TSRs) <- c("S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")
# YPD vs. diamide STRIPE-seq TSRs
YPD_diamide_TSRs <- list(YPD_TSRs$S288C_100ng_1,YPD_TSRs$S288C_100ng_2,YPD_TSRs$S288C_100ng_3,
diamide_TSRs$S288C_diamide_100ng_1,diamide_TSRs$S288C_diamide_100ng_2,diamide_TSRs$S288C_diamide_100ng_3)
names(YPD_diamide_TSRs) <- c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_diamide_100ng_1","S288C_diamide_100ng_2","S288C_diamide_100ng_3")
# Read in annotation files (included with package)
annotation <- system.file("extdata", "yeast_annotation.gtf", package="tsrexplorer")
assembly <- system.file("extdata", "yeast_assembly.fasta", package="tsrexplorer")
# Read in TSSs and TSRs to TSRexploreR. Make sure that the matched TSS and TSR sets are used!
exp <- tsr_explorer(YPD_TSSs,YPD_TSRs)
# Normalize counts
exp <- count_normalization(exp, data_type = "tss", n_samples = 1, threshold = 3)
# Generate a hierarchically clustered heatmap
p <- plot_correlation(exp, data_type = "tss", correlation_plot = "hierarchical", col = viridis(256), correlation_metric = "spearman")
pdf("tss_correlation_hierarchical.pdf", height = 3.5, width = 4)
p
dev.off()
# Generate a hierarchically clustered heatmap
p <- plot_correlation(exp, data_type = "tss", correlation_plot = "hierarchical", col = viridis(256), correlation_metric = "pearson")
pdf("tss_correlation_hierarchical.pdf", height = 3.5, width = 4)
p
dev.off()
# Annotate TSSs relative to genomic features
exp <- annotate_features(exp, annotation_file = annotation, data_type = "tss", feature_type = "transcript", upstream = 250, downstream = 100)
# Determine TSS distribution relative to genomic features
tss_distribution <- genomic_distribution(exp, data_type = "tss", threshold = 3, samples = "S288C_100ng_1")
p <- plot_genomic_distribution(tss_distribution) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tss_genomic_distribution.pdf", plot = p, device = cairo_pdf, height = 1.5, width = 4)
genomic_dist <- genomic_distribution(exp, data_type = "tss", threshold = 3, quantiles = 5, samples = "S288C_100ng_1")
p <- plot_genomic_distribution(genomic_dist) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tss_genomic_distribution_quantiles.pdf", plot = p, device = cairo_pdf, height = 4, width = 4)
# Plot number of promoter-proximal features with a TSS
features <- detect_features(exp, data_type = "tss", feature_type = "transcript", threshold = 3, samples = "S288C_100ng_1")
p <- plot_detected_features(features, ncol = 3) +
ggplot2::theme(text = element_text(size = 5))
ggsave("tss_feature_plot.pdf", plot = p, device = cairo_pdf, height = 2, width = 3)
# Generate TSS density plots
p <- plot_average(exp, data_type = "tss", threshold = 3, ncol = 3, samples = "S288C_100ng_1") +
ggplot2::theme(text = element_text(size = 6))
ggsave("tss_average_plot.pdf", plot = p, cairo_pdf, height = 4, width = 4)
# Generate TSS sequence logos
seqs <- tss_sequences(exp, genome_assembly = assembly, threshold = 3, samples = "S288C_100ng_1")
p <- plot_sequence_logo(seqs, ncol = 3) +
ggplot2::theme(text = element_text(size = 5))
ggsave("tss_seq_logo.pdf", plot = p, device = cairo_pdf, height = 1, width = 2)
seqs <- tss_sequences(exp, genome_assembly = assembly, threshold = 3, quantiles = 5, samples = "S288C_100ng_1")
p <- plot_sequence_logo(seqs, ncol = 3) +
ggplot2::theme(text = element_text(size = 5))
ggsave("tss_seq_logo_quantiles.pdf", plot = p, device = cairo_pdf, height = 5, width = 2)
# Generate TSS color plot
seqs <- tss_sequences(exp, genome_assembly = assembly, threshold = 3, samples = "S288C_100ng_1")
p <- plot_sequence_colormap(seqs, ncol = 3) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tss_seq_colormap.png", plot = p, device = "png", type = "cairo", height = 2.5, width = 2)
# Assess TSS dinucleotide frequencies
frequencies <- dinucleotide_frequencies(exp, genome_assembly = assembly, threshold = 3, samples = "S288C_100ng_1")
p <- plot_dinucleotide_frequencies(frequencies, ncol = 3) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tss_dinucleotide_frequencies.pdf", plot = p, device = cairo_pdf, height = 1.7, width = 2.5)
# Plot distance of dominant TSS to annotated start codon
dominant <- dominant_tss(exp, threshold = 3, feature_type = "geneId", samples = "S288C_100ng_1")
p <- plot_dominant_tss(dominant, upstream = 500, downstream = 500)
ggsave("dominant_tss.pdf", plot = p, device = cairo_pdf, height = 4, width = 4)
# Plot hypothetical maximum 5'UTR length
max <- max_utr(exp, threshold = 3, feature_type = "geneId", samples = "S288C_100ng_1")
p <- plot_max_utr(max)
ggsave("max_utr.pdf", plot = p, device = cairo_pdf, height = 4, width = 4)
