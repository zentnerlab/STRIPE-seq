annotated_diff_tsrs <- annotate_differential_tsrs(diff_tsrs, annotation_file = annotation)
p <- plot_volcano(diff_tsrs)
ggsave("diff_tsrs_volcano_plot.png", plot = p, device = "png", type = "cairo", height = 2, width = 4)
library(tsrexplorer)
library(tidyverse)
library(GenomicRanges)
library(viridis)
library("ChIPseeker", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
# Annotated dTSRs
annotated_diff_tsrs <- annotate_differential_tsrs(diff_tsrs, annotation_file = annotation)
library("GenomicFeatures", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
?annotate_differential_tsrs
# Annotated dTSRs
annotated_diff_tsrs <- annotate_differential_tsrs(diff_tsrs, annotation_file = annotation, feature_type = "transcript", upstream = 250, downstream = 100)
# Annotated dTSRs
annotated_diff_tsrs <- annotate_differential_tsrs(diff_tsrs, annotation_file = annotation, upstream = 250, downstream = 100)
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = c("score"), log2_transform = TRUE, ncol = 2) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_metrics.pdf", plot = p, device = cairo_pdf, width = 7, height = 7)
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = c("nTAGs"), log2_transform = TRUE, ncol = 2) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_metrics.pdf", plot = p, device = cairo_pdf, width = 7, height = 7)
# Normalize TSR counts
exp <- count_normalization(exp, data_type = "tsr", threshold = 3, n_samples = 1)
exp@counts$TSRs$cpm
exp@counts$TSRs$tmm_matrix
exp@counts$TSRs$cpm
exp@counts$TSRs$tmm_matrix
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = c("nTAGs"), log2_transform = TRUE, ncol = 1) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_metrics.pdf", plot = p, device = cairo_pdf, width = 7, height = 7)
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = c("nTSSs"), log2_transform = TRUE, ncol = 1) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_metrics.pdf", plot = p, device = cairo_pdf, width = 7, height = 7)
exp@counts$TSSs
exp@counts$TSRs
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = score, log2_transform = TRUE, ncol = 1) +
ggplot2::theme(text = element_text(size = 6))
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = "score", log2_transform = TRUE, ncol = 1) +
ggplot2::theme(text = element_text(size = 6))
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = "nTAGs", log2_transform = TRUE, ncol = 1) +
ggplot2::theme(text = element_text(size = 6))
TSSs <- system.file("extdata", "yeast_TSSs.RDS", package = "tsrexplorer")
TSSs <- readRDS(TSSs)
TSRs <- system.file("extdata", "yeast_TSRs.RDS", package = "tsrexplorer")
TSRs <- readRDS(TSRs)
annotation <- system.file("extdata", "yeast_annotation.gtf", package="tsrexplorer")
assembly <- system.file("extdata", "yeast_assembly.fasta", package="tsrexplorer")
exp <- tsr_explorer(TSSs, TSRs)
exp <- count_normalization(exp, data_type = "tsr")
p <- plot_tsr_metric(exp, tsr_metrics = c("nTAGs", "nTSSs"), log2_transform = TRUE, ncol = 2) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_metrics.png", plot = p, device = "png", type = "cairo", width = 4, height = 2)
rlang::last_error()
exp@counts$TSRs
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = "tsrPeak", log2_transform = TRUE, ncol = 1) +
ggplot2::theme(text = element_text(size = 6))
rlang::last_error()
exp@samples
exp@samples
exp@annotated
exp@experiment$TSRs$S288C_WT_100ng_1
exp@cores
exp@counts
# Generate TSR average plot
p <- plot_average(exp, data_type = "tsr", samples = "S288C_100ng_1") +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_average_plot.png", plot = p, device = "png", type = "cairo", height = 1.5, width = 4)
# Generate a hierarchically clustered heatmap
p <- plot_correlation(exp, data_type = "tsr", correlation_plot = "hierarchical", col = viridis(256), correlation_metric = "pearson")
pdf("tsr_correlation_hierarchical.pdf", height = 7, width = 7)
p
dev.off()
# Annotate TSRs
exp <- annotate_features(exp, annotation_file = annotation, data_type = "tsr", feature_type = "transcript")
# Annotated dTSRs
annotated_diff_tsrs <- annotate_differential_tsrs(diff_tsrs, annotation_file = annotation, upstream = 250, downstream = 100)
# Determine TSR distribution relative to genomic features
tsr_distribution <- genomic_distribution(exp, data_type = "tsr", threshold = 3, samples = "S288C_100ng_1")
# Annotate TSRs
exp <- annotate_features(exp, annotation_file = annotation, data_type = "tsr", feature_type = "transcript")
# Annotated dTSRs
annotated_diff_tsrs <- annotate_differential_tsrs(diff_tsrs, annotation_file = annotation, upstream = 250, downstream = 100)
# Annotated dTSRs
annotated_diff_tsrs <- annotate_differential_tsrs(diff_tsrs, annotation_file = annotation, feature_type ="transcript", upstream = 250, downstream = 100)
# Make a volcano plot of dTSRs
p <- plot_volcano(diff_tsrs)
ggsave("diff_tsrs_volcano_plot.png", plot = p, device = "png", type = "cairo", height = 2, width = 4)
diff_tsrs
diff_tsrs %>% select(log2FC <= -1 & FDR < 0.05)
diff_tsrs %>% as.data.frame %>% select(log2FC <= -1 & FDR < 0.05)
diff_tsrs %>% dplyr::select(log2FC <= -1 & FDR < 0.05)
diff_tsrs %>% dplyr::select(.,log2FC <= -1 & FDR < 0.05)
diff_tsrs %>% dplyr::select(., FDR < 0.05)
diff_tsrs %>% dplyr::filter(.,log2FC <= -1 & FDR < 0.05)
diff_tsrs %>% dplyr::filter(.,log2FC >= 1 & FDR < 0.05)
library(tsrexplorer)
library(tidyverse)
library(GenomicRanges)
library(viridis)
# Pull latest version of tsrexplorer
# devtools::install_github("rpolicastro/tsrexplorer", ref = "dev", force = TRUE)
setwd("/Users/gzentner/Desktop/tsrexplorer/yeast/STRIPE-seq/Gabe_yeast_work/")
####################
### Read in TSSs ###
####################
# STRIPE-seq YPD TSSs
YPD_TSSs <- map(list.files("../yeast_data/YPD_TSSs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "TSS", end.field = "TSS"))
names(YPD_TSSs) <- c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3")
# STRIPE-seq diamide TSSs
diamide_TSSs <- map(list.files("../yeast_data/diamide_TSSs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "TSS", end.field = "TSS"))
names(diamide_TSSs) <- c("S288C_diamide_100ng_1","S288C_diamide_100ng_2","S288C_diamide_100ng_3")
# SLIC-CAGE and nanoCAGE TSSs
CAGE_TSSs <- map(list.files("../yeast_data/CAGE_TSSs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "TSS", end.field = "TSS"))
names(CAGE_TSSs) <- c("SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")
# Generate various composite TSS as necessary
# 100 ng STRIPE-seq, SLIC-CAGE, and nanoCAGE TSSs for looking at method correlation
STRIPE_100ng_SLIC_CAGE_nanoCAGE_TSSs <- list(YPD_TSSs$S288C_100ng_1,YPD_TSSs$S288C_100ng_2,YPD_TSSs$S288C_100ng_3,
CAGE_TSSs$SLIC_CAGE_100ng_1,CAGE_TSSs$SLIC_CAGE_100ng_2,
CAGE_TSSs$nanoCAGE_500ng_1,CAGE_TSSs$nanoCAGE_500ng_2,
CAGE_TSSs$nanoCAGE_25ng_1,CAGE_TSSs$nanoCAGE_25ng_2)
names(STRIPE_100ng_SLIC_CAGE_nanoCAGE_TSSs) <- c("S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")
# YPD vs. diamide STRIPE-seq TSSs
YPD_diamide_TSSs <- list(YPD_TSSs$S288C_100ng_1,YPD_TSSs$S288C_100ng_2,YPD_TSSs$S288C_100ng_3,
diamide_TSSs$S288C_diamide_100ng_1,diamide_TSSs$S288C_diamide_100ng_2,diamide_TSSs$S288C_diamide_100ng_3)
names(YPD_diamide_TSSs) <- c("S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_diamide_100ng_1","S288C_diamide_100ng_2","S288C_diamide_100ng_3")
####################
### Read in TSRs ###
####################
# STRIPE-seq YPD TSRs
YPD_TSRs <- map(list.files("../yeast_data/YPD_TSRs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "start", end.field = "end"))
names(YPD_TSRs) <- c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3")
# STRIPE-seq diamide TSRs
diamide_TSRs <- map(list.files("../yeast_data/diamide_TSRs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "start", end.field = "end"))
names(diamide_TSRs) <- c("S288C_diamide_100ng_1","S288C_diamide_100ng_2","S288C_diamide_100ng_3")
# SLIC-CAGE and nanoCAGE TSRs
CAGE_TSRs <- map(list.files("../yeast_data/CAGE_TSRs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "start", end.field = "end"))
names(CAGE_TSRs) <- c("SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")
# Generate various composite TSR lists if desired
# 100 ng STRIPE-seq, SLIC-CAGE, and nanoCAGE TSSs for looking at method correlation
STRIPE_100ng_SLIC_CAGE_nanoCAGE_TSRs <- list(YPD_TSRs$S288C_100ng_1,YPD_TSRs$S288C_100ng_2,YPD_TSRs$S288C_100ng_3,
CAGE_TSRs$SLIC_CAGE_100ng_1,CAGE_TSRs$SLIC_CAGE_100ng_2,
CAGE_TSRs$nanoCAGE_500ng_1,CAGE_TSRs$nanoCAGE_500ng_2,
CAGE_TSRs$nanoCAGE_25ng_1,CAGE_TSRs$nanoCAGE_25ng_2)
names(STRIPE_100ng_SLIC_CAGE_nanoCAGE_TSRs) <- c("S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")
# YPD vs. diamide STRIPE-seq TSRs
YPD_diamide_TSRs <- list(YPD_TSRs$S288C_100ng_1,YPD_TSRs$S288C_100ng_2,YPD_TSRs$S288C_100ng_3,
diamide_TSRs$S288C_diamide_100ng_1,diamide_TSRs$S288C_diamide_100ng_2,diamide_TSRs$S288C_diamide_100ng_3)
names(YPD_diamide_TSRs) <- c("S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_diamide_100ng_1","S288C_diamide_100ng_2","S288C_diamide_100ng_3")
# Read in annotation files (included with package)
annotation <- system.file("extdata", "yeast_annotation.gtf", package="tsrexplorer")
assembly <- system.file("extdata", "yeast_assembly.fasta", package="tsrexplorer")
# Read in TSSs and TSRs to TSRexploreR. Make sure that the matched TSS and TSR sets are used!
exp <- tsr_explorer(YPD_diamide_TSSs,YPD_diamide_TSRs)
# Set working directory to where the files should be output
setwd("/Users/gzentner/Desktop/tsrexplorer/yeast/STRIPE-seq/Gabe_yeast_work/YPD_STRIPE/")
####################
### TSS analysis ###
####################
# Normalize counts
exp <- count_normalization(exp, data_type = "tss", n_samples = 1, threshold = 3)
# Normalize TSR counts
exp <- count_normalization(exp, data_type = "tsr", threshold = 3, n_samples = 1)
p <- plot_correlation(exp, data_type = "tsr", correlation_plot = "hierarchical", col = viridis(256), correlation_metric = "pearson")
pdf("tsr_correlation_hierarchical.pdf", height = 7, width = 7)
p
dev.off()
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = "tsrPeak", log2_transform = TRUE, ncol = 1) +
ggplot2::theme(text = element_text(size = 6))
edger_model <- fit_edger_model(
exp,
data_type = "tsr",
samples = c(
"S288C_100ng_1",
"S288C_100ng_2",
"S288C_100ng_3",
"S288C_diamide_100ng_1",
"S288C_diamide_100ng_2",
"S288C_diamide_100ng_3"
),
groups = c(1, 1, 1, 2, 2, 2)
)
diff_tsrs <- differential_expression(edger_model, data_type = "tsr", compare_groups = c(1, 2))
diff_tsrs
exp@counts$TSRs
diff_tsrs
?differential_expression
edger_model
library(rtracklayer)
export.bedGraph(exp@counts$TSSs$cpm$S288C_100ng_1[strand(exp@counts$TSSs$cpm$S288C_100ng_1) == "+"], "S288C_100ng_1_+.bedgraph")
export.bedGraph(exp@counts$TSSs$cpm$S288C_100ng_1[strand(exp@counts$TSSs$cpm$S288C_100ng_1) == "-"], "S288C_100ng_1_-.bedgraph")
export.bedGraph(exp@counts$TSSs$cpm$S288C_diamide_100ng_1[strand(exp@counts$TSSs$cpm$S288C_diamide_100ng_1) == "+"], "S288C_diamide_100ng_1_+.bedgraph")
export.bedGraph(exp@counts$TSSs$cpm$S288C_diamide_100ng_1[strand(exp@counts$TSSs$cpm$S288C_diamide_100ng_1) == "-"], "S288C_diamide_100ng_1_-.bedgraph")
write.table(diff_tsrs, "diff_tsrs.txt", sep="\t", col.names=T, row.names=T, quote=F)
write.table(diff_tsrs, "diff_tsrs.txt", sep="\t", col.names=T, row.names=F, quote=F)
write.table(diff_tsrs, "diff_tsrs.bed", sep="\t", col.names=T, row.names=F, quote=F)
str(diff_tsrs)
diff_tsrs %>% filter(., log2FC < 0.5)
diff_tsrs %>% filter(log2FC <= -1 & FDR < 0.05)
diff_tsrs %>% filter(log2FC <= -1 or >= 1 & FDR < 0.05)
diff_tsrs %>% filter(log2FC <= -1 | >= 1 & FDR < 0.05)
diff_tsrs %>% filter(log2FC <= -1 | log2FC >= 1 & FDR < 0.05)
diff_tsrs %>%
filter(log2FC <= -1 | log2FC >= 1 & FDR < 0.05) %>%
write.table(., "diff_tsrs.bed", sep="\t", col.names=T, row.names=F, quote=F)
diff_tsrs %>%
filter(log2FC <= -1 & FDR < 0.05 | log2FC >= 1 & FDR < 0.05) %>%
write.table(., "diff_tsrs.bed", sep="\t", col.names=T, row.names=F, quote=F)
# Read in TSSs and TSRs to TSRexploreR. Make sure that the matched TSS and TSR sets are used!
exp <- tsr_explorer(STRIPE_100ng_SLIC_CAGE_nanoCAGE_TSSs,STRIPE_100ng_SLIC_CAGE_nanoCAGE_TSRs)
# Normalize counts
exp <- count_normalization(exp, data_type = "tss", n_samples = 1, threshold = 3)
export.bedGraph(exp@counts$TSSs$cpm$S288C_100ng_1[strand(exp@counts$TSSs$cpm$S288C_100ng_1) == "+"], "S288C_100ng_1_+.bedgraph")
export.bedGraph(exp@counts$TSSs$cpm$S288C_100ng_1[strand(exp@counts$TSSs$cpm$S288C_100ng_1) == "-"], "S288C_100ng_1_-.bedgraph")
export.bedGraph(exp@counts$TSSs$cpm$SLIC_CAGE_100ng_1[strand(exp@counts$TSSs$cpm$SLIC_CAGE_100ng_1) == "+"], "SLIC_CAGE_100ng_1_+.bedgraph")
export.bedGraph(exp@counts$TSSs$cpm$SLIC_CAGE_100ng_1[strand(exp@counts$TSSs$cpm$SLIC_CAGE_100ng_1) == "-"], "SLIC_CAGE_100ng_1_-.bedgraph")
export.bedGraph(exp@counts$TSSs$cpm$nanoCAGE_500ng_1[strand(exp@counts$TSSs$cpm$nanoCAGE_500ng_1) == "+"], "nanoCAGE_500ng_1_+.bedgraph")
export.bedGraph(exp@counts$TSSs$cpm$nanoCAGE_500ng_1[strand(exp@counts$TSSs$cpm$nanoCAGE_500ng_1) == "-"], "nanoCAGE_500ng_1_-.bedgraph")
export.bedGraph(exp@counts$TSSs$cpm$nanoCAGE_25ng_1[strand(exp@counts$TSSs$cpm$nanoCAGE_25ng_1) == "+"], "nanoCAGE_25ng_1_+.bedgraph")
export.bedGraph(exp@counts$TSSs$cpm$nanoCAGE_25ng_1[strand(exp@counts$TSSs$cpm$nanoCAGE_25ng_1) == "-"], "nanoCAGE_25ng_1_-.bedgraph")
# Normalize TSR counts
exp <- count_normalization(exp, data_type = "tsr", threshold = 3, n_samples = 1)
# Annotate TSRs
exp <- annotate_features(exp, annotation_file = annotation, data_type = "tsr", feature_type = "transcript")
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = "tsrPeak", log2_transform = TRUE, ncol = 1) +
ggplot2::theme(text = element_text(size = 6))
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = "tsrPeak", log2_transform = TRUE, ncol = 1) +
ggplot2::theme(text = element_text(size = 6))
p <- plot_tsr_metric(exp, tsr_metrics = "tsrPeak", log2_transform = TRUE, ncol = 1) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_metrics.pdf", plot = p, device = cairo_pdf, width = 7, height = 7)
warnings()
p <- plot_tsr_metric(exp, tsr_metrics = "nTAGs", log2_transform = TRUE, ncol = 1) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_metrics.pdf", plot = p, device = cairo_pdf, width = 7, height = 7)
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = "nTSSs", log2_transform = TRUE, ncol = 1) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_metrics.pdf", plot = p, device = cairo_pdf, width = 7, height = 7)
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = "nTSSs", log2_transform = TRUE, ncol = 1) +
p <- plot_tsr_metric(exp, tsr_metrics = "nTSSs", log2_transform = TRUE, ncol = 1) +
ggplot2::theme(text = element_text(size = 6) +
ggplot2::geom_violin
)
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = "nTSSs", log2_transform = TRUE, ncol = 1) +
ggplot2::theme(text = element_text(size = 6) +
ggplot2::geom_violin(aes(y=nTSSs))
)
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = "nTSSs", log2_transform = TRUE, ncol = 1) +
ggplot2::theme(text = element_text(size = 6) +
ggplot2::geom_violin(aes(y=nTSSs))
)
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = "nTSSs", log2_transform = TRUE, ncol = 1, plot_type = "boxplot") +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_metrics.pdf", plot = p, device = cairo_pdf, width = 7, height = 7)
?plot_tsr_metric
p <- plot_tsr_metric(exp, tsr_metrics = "nTSSs", log2_transform = TRUE, ncol = 1, plot_type = "jitter") +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_metrics.pdf", plot = p, device = cairo_pdf, width = 7, height = 7)
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = "nTSSs", log2_transform = TRUE, ncol = 1, plot_type = "boxjitter") +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_metrics.pdf", plot = p, device = cairo_pdf, width = 7, height = 7)
warnings()
?geom_jitter
p <- plot_tsr_metric(exp, tsr_metrics = "nTSSs", log2_transform = TRUE, ncol = 1, plot_type = "boxjitter") +
ggplot2::theme(text = element_text(size = 6) +
ggplot2::geom_point(size = 1))
ggsave("tsr_metrics.pdf", plot = p, device = cairo_pdf, width = 7, height = 7)
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = "nTSSs", log2_transform = TRUE, ncol = 1, plot_type = "boxjitter") +
ggplot2::theme(text = element_text(size = 6) +
ggplot2::geom_point(aes(size = 1)))
ggsave("tsr_metrics.pdf", plot = p, device = cairo_pdf, width = 7, height = 7)
?theme
?geom_point
p <- plot_tsr_metric(exp, tsr_metrics = "nTSSs", log2_transform = TRUE, ncol = 1, plot_type = "boxjitter") +
ggplot2::theme(text = element_text(size = 6) +
ggplot2::geom_point(size = 1))
ggsave("tsr_metrics.pdf", plot = p, device = cairo_pdf, width = 7, height = 7)
?geom_jitter
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = "nTSSs", log2_transform = TRUE, ncol = 1, plot_type = "boxjitter") +
ggplot2::theme(text = element_text(size = 6) +
ggplot2::geom_jitter(size = 1))
ggsave("tsr_metrics.pdf", plot = p, device = cairo_pdf, width = 7, height = 7)
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = "nTSSs", log2_transform = TRUE, ncol = 1, plot_type = "boxjitter") +
ggplot2::theme(text = element_text(size = 6)) +
ggplot2::geom_jitter(size = 1)
ggsave("tsr_metrics.pdf", plot = p, device = cairo_pdf, width = 7, height = 7)
p <- plot_tsr_metric(exp, tsr_metrics = "nTSSs", log2_transform = TRUE, ncol = 1, plot_type = "boxjitter") +
ggplot2::theme(text = element_text(size = 6))
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = "nTSSs", log2_transform = TRUE, ncol = 1, plot_type = "boxjitter") +
ggplot2::theme(text = element_text(size = 6)) +
ggsave("tsr_metrics.pdf", plot = p, device = cairo_pdf, width = 7, height = 7)
p
exp@experiment$TSRs$S288C_100ng_1
exp@counts$TSRs$raw
exp@counts$TSRs$tmm_matrix
exp@counts$TSRs$cpm
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = "tsrTrq", log2_transform = TRUE, ncol = 1, plot_type = "boxjitter") +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_metrics.pdf", plot = p, device = cairo_pdf, width = 7, height = 7)
?plot_correlation
exp@counts$TSRs$tmm_matrix
slic_merged_TSRs <- reduce(c(exp@experiment$TSRs$SLIC_CAGE_100ng_1,exp@experiment$TSRs$SLIC_CAGE_100ng_2)
)
exp@experiment$TSRs$SLIC_CAGE_100ng_1
?reduce
slic_merged_TSRs <- GenomicRanges::reduce(c(exp@experiment$TSRs$SLIC_CAGE_100ng_1,exp@experiment$TSRs$SLIC_CAGE_100ng_2))
slic_merged_TSRs
library("HelloRanges", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
?countOverlaps
TSSlist <- c(exp@experiment$TSRs$S288C_100ng_1$nTSSs)
TSSlist
library("tsrexplorer", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
remove.packages("tsrexplorer")
# Pull latest version of tsrexplorer
devtools::install_github("rpolicastro/tsrexplorer", ref = "dev", force = TRUE)
library(tsrexplorer)
library(tidyverse)
library(GenomicRanges)
library(viridis)
library(rtracklayer)
# Pull latest version of tsrexplorer
devtools::install_github("rpolicastro/tsrexplorer", ref = "dev", force = TRUE)
library(tsrexplorer)
library(tidyverse)
library(GenomicRanges)
library(viridis)
library(rtracklayer)
# Pull latest version of tsrexplorer
# devtools::install_github("rpolicastro/tsrexplorer", ref = "dev", force = TRUE)
setwd("/Users/gzentner/Desktop/tsrexplorer/yeast/STRIPE-seq/Gabe_yeast_work/")
####################
### Read in TSSs ###
####################
# STRIPE-seq YPD TSSs
YPD_TSSs <- map(list.files("../yeast_data/YPD_TSSs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "TSS", end.field = "TSS"))
names(YPD_TSSs) <- c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3")
# STRIPE-seq diamide TSSs
diamide_TSSs <- map(list.files("../yeast_data/diamide_TSSs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "TSS", end.field = "TSS"))
names(diamide_TSSs) <- c("S288C_diamide_100ng_1","S288C_diamide_100ng_2","S288C_diamide_100ng_3")
# SLIC-CAGE and nanoCAGE TSSs
CAGE_TSSs <- map(list.files("../yeast_data/CAGE_TSSs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "TSS", end.field = "TSS"))
names(CAGE_TSSs) <- c("SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")
# Generate various composite TSS as necessary
# 100 ng STRIPE-seq, SLIC-CAGE, and nanoCAGE TSSs for looking at method correlation
STRIPE_100ng_SLIC_CAGE_nanoCAGE_TSSs <- list(YPD_TSSs$S288C_100ng_1,YPD_TSSs$S288C_100ng_2,YPD_TSSs$S288C_100ng_3,
CAGE_TSSs$SLIC_CAGE_100ng_1,CAGE_TSSs$SLIC_CAGE_100ng_2,
CAGE_TSSs$nanoCAGE_500ng_1,CAGE_TSSs$nanoCAGE_500ng_2,
CAGE_TSSs$nanoCAGE_25ng_1,CAGE_TSSs$nanoCAGE_25ng_2)
names(STRIPE_100ng_SLIC_CAGE_nanoCAGE_TSSs) <- c("S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")
# YPD vs. diamide STRIPE-seq TSSs
YPD_diamide_TSSs <- list(YPD_TSSs$S288C_100ng_1,YPD_TSSs$S288C_100ng_2,YPD_TSSs$S288C_100ng_3,
diamide_TSSs$S288C_diamide_100ng_1,diamide_TSSs$S288C_diamide_100ng_2,diamide_TSSs$S288C_diamide_100ng_3)
names(YPD_diamide_TSSs) <- c("S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_diamide_100ng_1","S288C_diamide_100ng_2","S288C_diamide_100ng_3")
####################
### Read in TSRs ###
####################
# STRIPE-seq YPD TSRs
YPD_TSRs <- map(list.files("../yeast_data/YPD_TSRs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "start", end.field = "end"))
names(YPD_TSRs) <- c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3")
# STRIPE-seq diamide TSRs
diamide_TSRs <- map(list.files("../yeast_data/diamide_TSRs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "start", end.field = "end"))
names(diamide_TSRs) <- c("S288C_diamide_100ng_1","S288C_diamide_100ng_2","S288C_diamide_100ng_3")
# SLIC-CAGE and nanoCAGE TSRs
CAGE_TSRs <- map(list.files("../yeast_data/CAGE_TSRs/", full.names = TRUE), ~ read.delim(.x) %>%
as.data.frame %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE, seqnames.field = "seq",
start.field = "start", end.field = "end"))
names(CAGE_TSRs) <- c("SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")
# Generate various composite TSR lists if desired
# 100 ng STRIPE-seq, SLIC-CAGE, and nanoCAGE TSSs for looking at method correlation
STRIPE_100ng_SLIC_CAGE_nanoCAGE_TSRs <- list(YPD_TSRs$S288C_100ng_1,YPD_TSRs$S288C_100ng_2,YPD_TSRs$S288C_100ng_3,
CAGE_TSRs$SLIC_CAGE_100ng_1,CAGE_TSRs$SLIC_CAGE_100ng_2,
CAGE_TSRs$nanoCAGE_500ng_1,CAGE_TSRs$nanoCAGE_500ng_2,
CAGE_TSRs$nanoCAGE_25ng_1,CAGE_TSRs$nanoCAGE_25ng_2)
names(STRIPE_100ng_SLIC_CAGE_nanoCAGE_TSRs) <- c("S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")
# YPD vs. diamide STRIPE-seq TSRs
YPD_diamide_TSRs <- list(YPD_TSRs$S288C_100ng_1,YPD_TSRs$S288C_100ng_2,YPD_TSRs$S288C_100ng_3,
diamide_TSRs$S288C_diamide_100ng_1,diamide_TSRs$S288C_diamide_100ng_2,diamide_TSRs$S288C_diamide_100ng_3)
names(YPD_diamide_TSRs) <- c("S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_diamide_100ng_1","S288C_diamide_100ng_2","S288C_diamide_100ng_3")
# Read in annotation files (included with package)
annotation <- system.file("extdata", "yeast_annotation.gtf", package="tsrexplorer")
assembly <- system.file("extdata", "yeast_assembly.fasta", package="tsrexplorer")
# Read in TSSs and TSRs to TSRexploreR. Make sure that the matched TSS and TSR sets are used!
exp <- tsr_explorer(YPD_diamide_TSSs,YPD_diamide_TSRs)
# Set working directory to where the files should be output
setwd("/Users/gzentner/Desktop/tsrexplorer/yeast/STRIPE-seq/Gabe_yeast_work/YPD_STRIPE/")
####################
### TSS analysis ###
####################
# Normalize counts
exp <- count_normalization(exp, data_type = "tss", n_samples = 1, threshold = 3)
# Normalize TSR counts
exp <- count_normalization(exp, data_type = "tsr", threshold = 3, n_samples = 1)
# Generate a hierarchically clustered heatmap
p <- plot_correlation(exp, data_type = "tsr", correlation_plot = "hierarchical", col = viridis(256), correlation_metric = "pearson")
pdf("tsr_correlation_hierarchical.pdf", height = 7, width = 7)
p
dev.off()
# Generate a hierarchically clustered heatmap
p <- plot_correlation(exp, data_type = "tsr", correlation_plot = "hierarchical", col = viridis(256), correlation_metric = "spearman")
pdf("tsr_correlation_hierarchical.pdf", height = 7, width = 7)
p
dev.off()
# Plot selected TSR metrics
p <- plot_tsr_metric(exp, tsr_metrics = "tsrTrq", log2_transform = TRUE, ncol = 1, plot_type = "boxjitter") +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_metrics.pdf", plot = p, device = cairo_pdf, width = 7, height = 7)
# Annotate TSRs
exp <- annotate_features(exp, annotation_file = annotation, data_type = "tsr", feature_type = "transcript")
edger_model <- fit_edger_model(
exp,
data_type = "tsr",
samples = c(
"S288C_100ng_1",
"S288C_100ng_2",
"S288C_100ng_3",
"S288C_diamide_100ng_1",
"S288C_diamide_100ng_2",
"S288C_diamide_100ng_3"
),
groups = c(1, 1, 1, 2, 2, 2)
)
diff_tsrs <- differential_expression(edger_model, data_type = "tsr", compare_groups = c(1, 2))
# Annotate dTSRs
annotated_diff_tsrs <- annotate_differential_tsrs(diff_tsrs, annotation_file = annotation, upstream = 250, downstream = 100)
