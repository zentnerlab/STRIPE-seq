"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")))
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 12, width = 12)
# Convert complexities to a log2-transformed data frame and plot a correlation heatmap
tsr_complexity_df <- as.data.frame(tsr_complexity)
tsr_complexity_df_log2 <- log2(tsr_complexity_df + 1) %>%
set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
corr_matrix <- cor(tsr_complexity_df_log2, method = "spearman")
pdf(file = "tsr_complexity_hierarchical.pdf", width = 16, height = 16)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "Spearman"),
layer_fun = function(j, i, x, y, width, height, fill){
# since grid.text can also be vectorized
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 16, col = "white"))
})
dev.off()
# Combine SLIC-CAGE TSRs and count number of TSSs (TSR complexity) for each sample in these regions
slic_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$SLIC_CAGE_100ng_1,exp@counts$TSRs$cpm$SLIC_CAGE_100ng_2),
drop.empty.ranges = FALSE, min.gapwidth = 50, ignore.strand = FALSE, with.revmap = FALSE)
# Other merged TSR sets potentially of interest
# 100 ng STRIPE TSRs
stripe_100ng_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$S288C_100ng_1,exp@counts$TSRs$cpm$S288C_100ng_2,exp@counts$TSRs$cpm$S288C_100ng_3),
drop.empty.ranges = FALSE, min.gapwidth = 50, ignore.strand = FALSE, with.revmap = FALSE)
#TSRs from all CAGE methods
all_cage_tsrs_reduced <- GenomicRanges::reduce(unlist(GRangesList(CAGE_TSRs)), drop.empty.ranges = FALSE, min.gapwidth = 50,
ignore.strand = FALSE, with.revmap = FALSE)
#TSRs from STRIPE-seq and CAGE methods
stripe_cage_tsrs_reduced <- GenomicRanges::reduce(c(unlist(GRangesList(CAGE_TSRs)),
exp@counts$TSRs$cpm$S288C_100ng_1,
exp@counts$TSRs$cpm$S288C_100ng_2,
exp@counts$TSRs$cpm$S288C_100ng_3),
drop.empty.ranges = FALSE, min.gapwidth = 50,
ignore.strand = FALSE, with.revmap = FALSE)
samples_for_complexity <- list(exp@experiment$TSSs$S288C_50ng_1,exp@experiment$TSSs$S288C_50ng_2,exp@experiment$TSSs$S288C_50ng_3,
exp@experiment$TSSs$S288C_100ng_1,exp@experiment$TSSs$S288C_100ng_2,exp@experiment$TSSs$S288C_100ng_3,
exp@experiment$TSSs$S288C_250ng_1,exp@experiment$TSSs$S288C_250ng_2,exp@experiment$TSSs$S288C_250ng_3,
exp@experiment$TSSs$SLIC_CAGE_100ng_1,exp@experiment$TSSs$SLIC_CAGE_100ng_2,
exp@experiment$TSSs$nanoCAGE_500ng_1,exp@experiment$TSSs$nanoCAGE_500ng_2,
exp@experiment$TSSs$nanoCAGE_25ng_1,exp@experiment$TSSs$nanoCAGE_25ng_2) %>%
set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
tsr_complexity <- map(samples_for_complexity, ~ countOverlaps(slic_tsrs_reduced, .x) %>%
as.data.frame %>%
dplyr::rename(., nTSSs = .))
nTSSs <- bind_rows(tsr_complexity, .id = "sample") %>%
gather(key = "sample", value = "nTSSs")
nTSSs <- nTSSs %>%
mutate(log2 = log2(nTSSs + 1)) %>%
mutate(sample = factor(sample, levels=c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")))
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 12, width = 12)
# Convert complexities to a log2-transformed data frame and plot a correlation heatmap
tsr_complexity_df <- as.data.frame(tsr_complexity)
tsr_complexity_df_log2 <- log2(tsr_complexity_df + 1) %>%
set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
corr_matrix <- cor(tsr_complexity_df_log2, method = "spearman")
pdf(file = "tsr_complexity_hierarchical.pdf", width = 16, height = 16)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "Spearman"),
layer_fun = function(j, i, x, y, width, height, fill){
# since grid.text can also be vectorized
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 16, col = "white"))
})
dev.off()
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 12, width = 12)
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 12, width = 12)
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 16, width = 12)
ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12, vjust = 0.5)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12, vjust = 0.5, hjust = 0.5)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 16, width = 12)
ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12, vjust = 0.5, hjust = 0.1)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12, vjust = 0.5, hjust = -.25)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12, vjust = 0.5, hjust = 1)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 16, width = 12)
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12, hjust = 1)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 16, width = 12)
# Combine SLIC-CAGE TSRs and count number of TSSs (TSR complexity) for each sample in these regions
slic_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$SLIC_CAGE_100ng_1,exp@counts$TSRs$cpm$SLIC_CAGE_100ng_2),
drop.empty.ranges = FALSE, min.gapwidth = 50, ignore.strand = FALSE, with.revmap = FALSE)
# Other merged TSR sets potentially of interest
# 100 ng STRIPE TSRs
stripe_100ng_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$S288C_100ng_1,exp@counts$TSRs$cpm$S288C_100ng_2,exp@counts$TSRs$cpm$S288C_100ng_3),
drop.empty.ranges = FALSE, min.gapwidth = 50, ignore.strand = FALSE, with.revmap = FALSE)
#TSRs from all CAGE methods
all_cage_tsrs_reduced <- GenomicRanges::reduce(unlist(GRangesList(CAGE_TSRs)), drop.empty.ranges = FALSE, min.gapwidth = 50,
ignore.strand = FALSE, with.revmap = FALSE)
#TSRs from STRIPE-seq and CAGE methods
stripe_cage_tsrs_reduced <- GenomicRanges::reduce(c(unlist(GRangesList(CAGE_TSRs)),
exp@counts$TSRs$cpm$S288C_100ng_1,
exp@counts$TSRs$cpm$S288C_100ng_2,
exp@counts$TSRs$cpm$S288C_100ng_3),
drop.empty.ranges = FALSE, min.gapwidth = 50,
ignore.strand = FALSE, with.revmap = FALSE)
samples_for_complexity <- list(exp@experiment$TSSs$S288C_50ng_1,exp@experiment$TSSs$S288C_50ng_2,exp@experiment$TSSs$S288C_50ng_3,
exp@experiment$TSSs$S288C_100ng_1,exp@experiment$TSSs$S288C_100ng_2,exp@experiment$TSSs$S288C_100ng_3,
exp@experiment$TSSs$S288C_250ng_1,exp@experiment$TSSs$S288C_250ng_2,exp@experiment$TSSs$S288C_250ng_3,
exp@experiment$TSSs$SLIC_CAGE_100ng_1,exp@experiment$TSSs$SLIC_CAGE_100ng_2,
exp@experiment$TSSs$nanoCAGE_500ng_1,exp@experiment$TSSs$nanoCAGE_500ng_2,
exp@experiment$TSSs$nanoCAGE_25ng_1,exp@experiment$TSSs$nanoCAGE_25ng_2) %>%
set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
tsr_complexity <- map(samples_for_complexity, ~ countOverlaps(stripe_cage_tsrs_reduced, .x) %>%
as.data.frame %>%
dplyr::rename(., nTSSs = .))
nTSSs <- bind_rows(tsr_complexity, .id = "sample") %>%
gather(key = "sample", value = "nTSSs")
nTSSs <- nTSSs %>%
mutate(log2 = log2(nTSSs + 1)) %>%
mutate(sample = factor(sample, levels=c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")))
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12, hjust = 1)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 16, width = 12)
# Convert complexities to a log2-transformed data frame and plot a correlation heatmap
tsr_complexity_df <- as.data.frame(tsr_complexity)
tsr_complexity_df_log2 <- log2(tsr_complexity_df + 1) %>%
set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
corr_matrix <- cor(tsr_complexity_df_log2, method = "spearman")
pdf(file = "tsr_complexity_hierarchical.pdf", width = 16, height = 16)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "Spearman"),
layer_fun = function(j, i, x, y, width, height, fill){
# since grid.text can also be vectorized
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 16, col = "white"))
})
dev.off()
# Combine SLIC-CAGE TSRs and count number of TSSs (TSR complexity) for each sample in these regions
slic_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$SLIC_CAGE_100ng_1,exp@counts$TSRs$cpm$SLIC_CAGE_100ng_2),
drop.empty.ranges = FALSE, min.gapwidth = 0, ignore.strand = FALSE, with.revmap = FALSE)
# Other merged TSR sets potentially of interest
# 100 ng STRIPE TSRs
stripe_100ng_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$S288C_100ng_1,exp@counts$TSRs$cpm$S288C_100ng_2,exp@counts$TSRs$cpm$S288C_100ng_3),
drop.empty.ranges = FALSE, min.gapwidth = 0, ignore.strand = FALSE, with.revmap = FALSE)
#TSRs from all CAGE methods
all_cage_tsrs_reduced <- GenomicRanges::reduce(unlist(GRangesList(CAGE_TSRs)), drop.empty.ranges = FALSE, min.gapwidth = 0,
ignore.strand = FALSE, with.revmap = FALSE)
#TSRs from STRIPE-seq and CAGE methods
stripe_cage_tsrs_reduced <- GenomicRanges::reduce(c(unlist(GRangesList(CAGE_TSRs)),
exp@counts$TSRs$cpm$S288C_100ng_1,
exp@counts$TSRs$cpm$S288C_100ng_2,
exp@counts$TSRs$cpm$S288C_100ng_3),
drop.empty.ranges = FALSE, min.gapwidth = 0,
ignore.strand = FALSE, with.revmap = FALSE)
samples_for_complexity <- list(exp@experiment$TSSs$S288C_50ng_1,exp@experiment$TSSs$S288C_50ng_2,exp@experiment$TSSs$S288C_50ng_3,
exp@experiment$TSSs$S288C_100ng_1,exp@experiment$TSSs$S288C_100ng_2,exp@experiment$TSSs$S288C_100ng_3,
exp@experiment$TSSs$S288C_250ng_1,exp@experiment$TSSs$S288C_250ng_2,exp@experiment$TSSs$S288C_250ng_3,
exp@experiment$TSSs$SLIC_CAGE_100ng_1,exp@experiment$TSSs$SLIC_CAGE_100ng_2,
exp@experiment$TSSs$nanoCAGE_500ng_1,exp@experiment$TSSs$nanoCAGE_500ng_2,
exp@experiment$TSSs$nanoCAGE_25ng_1,exp@experiment$TSSs$nanoCAGE_25ng_2) %>%
set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
tsr_complexity <- map(samples_for_complexity, ~ countOverlaps(stripe_cage_tsrs_reduced, .x) %>%
as.data.frame %>%
dplyr::rename(., nTSSs = .))
nTSSs <- bind_rows(tsr_complexity, .id = "sample") %>%
gather(key = "sample", value = "nTSSs")
nTSSs <- nTSSs %>%
mutate(log2 = log2(nTSSs + 1)) %>%
mutate(sample = factor(sample, levels=c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")))
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12, hjust = 1)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 16, width = 12)
# Convert complexities to a log2-transformed data frame and plot a correlation heatmap
tsr_complexity_df <- as.data.frame(tsr_complexity)
tsr_complexity_df_log2 <- log2(tsr_complexity_df + 1) %>%
set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
corr_matrix <- cor(tsr_complexity_df_log2, method = "spearman")
pdf(file = "tsr_complexity_hierarchical.pdf", width = 16, height = 16)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "Spearman"),
layer_fun = function(j, i, x, y, width, height, fill){
# since grid.text can also be vectorized
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 16, col = "white"))
})
dev.off()
# Combine SLIC-CAGE TSRs and count number of TSSs (TSR complexity) for each sample in these regions
slic_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$SLIC_CAGE_100ng_1,exp@counts$TSRs$cpm$SLIC_CAGE_100ng_2),
drop.empty.ranges = FALSE, min.gapwidth = 0, ignore.strand = FALSE, with.revmap = FALSE)
# Other merged TSR sets potentially of interest
# 100 ng STRIPE TSRs
stripe_100ng_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$S288C_100ng_1,exp@counts$TSRs$cpm$S288C_100ng_2,exp@counts$TSRs$cpm$S288C_100ng_3),
drop.empty.ranges = FALSE, min.gapwidth = 40, ignore.strand = FALSE, with.revmap = FALSE)
#TSRs from all CAGE methods
all_cage_tsrs_reduced <- GenomicRanges::reduce(unlist(GRangesList(CAGE_TSRs)), drop.empty.ranges = FALSE, min.gapwidth = 40,
ignore.strand = FALSE, with.revmap = FALSE)
#TSRs from STRIPE-seq and CAGE methods
stripe_cage_tsrs_reduced <- GenomicRanges::reduce(c(unlist(GRangesList(CAGE_TSRs)),
exp@counts$TSRs$cpm$S288C_100ng_1,
exp@counts$TSRs$cpm$S288C_100ng_2,
exp@counts$TSRs$cpm$S288C_100ng_3),
drop.empty.ranges = FALSE, min.gapwidth = 40,
ignore.strand = FALSE, with.revmap = FALSE)
samples_for_complexity <- list(exp@experiment$TSSs$S288C_50ng_1,exp@experiment$TSSs$S288C_50ng_2,exp@experiment$TSSs$S288C_50ng_3,
exp@experiment$TSSs$S288C_100ng_1,exp@experiment$TSSs$S288C_100ng_2,exp@experiment$TSSs$S288C_100ng_3,
exp@experiment$TSSs$S288C_250ng_1,exp@experiment$TSSs$S288C_250ng_2,exp@experiment$TSSs$S288C_250ng_3,
exp@experiment$TSSs$SLIC_CAGE_100ng_1,exp@experiment$TSSs$SLIC_CAGE_100ng_2,
exp@experiment$TSSs$nanoCAGE_500ng_1,exp@experiment$TSSs$nanoCAGE_500ng_2,
exp@experiment$TSSs$nanoCAGE_25ng_1,exp@experiment$TSSs$nanoCAGE_25ng_2) %>%
set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
tsr_complexity <- map(samples_for_complexity, ~ countOverlaps(slic_tsrs_reduced, .x) %>%
as.data.frame %>%
dplyr::rename(., nTSSs = .))
nTSSs <- bind_rows(tsr_complexity, .id = "sample") %>%
gather(key = "sample", value = "nTSSs")
nTSSs <- nTSSs %>%
mutate(log2 = log2(nTSSs + 1)) %>%
mutate(sample = factor(sample, levels=c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")))
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12, hjust = 1)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 16, width = 12)
# Convert complexities to a log2-transformed data frame and plot a correlation heatmap
tsr_complexity_df <- as.data.frame(tsr_complexity)
tsr_complexity_df_log2 <- log2(tsr_complexity_df + 1) %>%
set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
corr_matrix <- cor(tsr_complexity_df_log2, method = "spearman")
pdf(file = "tsr_complexity_hierarchical.pdf", width = 16, height = 16)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "Spearman"),
layer_fun = function(j, i, x, y, width, height, fill){
# since grid.text can also be vectorized
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 16, col = "white"))
})
dev.off()
# Combine SLIC-CAGE TSRs and count number of TSSs (TSR complexity) for each sample in these regions
slic_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$SLIC_CAGE_100ng_1,exp@counts$TSRs$cpm$SLIC_CAGE_100ng_2),
drop.empty.ranges = FALSE, min.gapwidth = 40, ignore.strand = FALSE, with.revmap = FALSE)
# Other merged TSR sets potentially of interest
# 100 ng STRIPE TSRs
stripe_100ng_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$S288C_100ng_1,exp@counts$TSRs$cpm$S288C_100ng_2,exp@counts$TSRs$cpm$S288C_100ng_3),
drop.empty.ranges = FALSE, min.gapwidth = 40, ignore.strand = FALSE, with.revmap = FALSE)
#TSRs from all CAGE methods
all_cage_tsrs_reduced <- GenomicRanges::reduce(unlist(GRangesList(CAGE_TSRs)), drop.empty.ranges = FALSE, min.gapwidth = 40,
ignore.strand = FALSE, with.revmap = FALSE)
#TSRs from STRIPE-seq and CAGE methods
stripe_cage_tsrs_reduced <- GenomicRanges::reduce(c(unlist(GRangesList(CAGE_TSRs)),
exp@counts$TSRs$cpm$S288C_100ng_1,
exp@counts$TSRs$cpm$S288C_100ng_2,
exp@counts$TSRs$cpm$S288C_100ng_3),
drop.empty.ranges = FALSE, min.gapwidth = 40,
ignore.strand = FALSE, with.revmap = FALSE)
samples_for_complexity <- list(exp@experiment$TSSs$S288C_50ng_1,exp@experiment$TSSs$S288C_50ng_2,exp@experiment$TSSs$S288C_50ng_3,
exp@experiment$TSSs$S288C_100ng_1,exp@experiment$TSSs$S288C_100ng_2,exp@experiment$TSSs$S288C_100ng_3,
exp@experiment$TSSs$S288C_250ng_1,exp@experiment$TSSs$S288C_250ng_2,exp@experiment$TSSs$S288C_250ng_3,
exp@experiment$TSSs$SLIC_CAGE_100ng_1,exp@experiment$TSSs$SLIC_CAGE_100ng_2,
exp@experiment$TSSs$nanoCAGE_500ng_1,exp@experiment$TSSs$nanoCAGE_500ng_2,
exp@experiment$TSSs$nanoCAGE_25ng_1,exp@experiment$TSSs$nanoCAGE_25ng_2) %>%
set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
tsr_complexity <- map(samples_for_complexity, ~ countOverlaps(slic_tsrs_reduced, .x) %>%
as.data.frame %>%
dplyr::rename(., nTSSs = .))
nTSSs <- bind_rows(tsr_complexity, .id = "sample") %>%
gather(key = "sample", value = "nTSSs")
nTSSs <- nTSSs %>%
mutate(log2 = log2(nTSSs + 1)) %>%
mutate(sample = factor(sample, levels=c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")))
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12, hjust = 1)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 16, width = 12)
# Convert complexities to a log2-transformed data frame and plot a correlation heatmap
tsr_complexity_df <- as.data.frame(tsr_complexity)
tsr_complexity_df_log2 <- log2(tsr_complexity_df + 1) %>%
set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
corr_matrix <- cor(tsr_complexity_df_log2, method = "spearman")
pdf(file = "tsr_complexity_hierarchical.pdf", width = 16, height = 16)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "Spearman"),
layer_fun = function(j, i, x, y, width, height, fill){
# since grid.text can also be vectorized
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 16, col = "white"))
})
dev.off()
# Combine SLIC-CAGE TSRs and count number of TSSs (TSR complexity) for each sample in these regions
slic_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$SLIC_CAGE_100ng_1,exp@counts$TSRs$cpm$SLIC_CAGE_100ng_2),
drop.empty.ranges = FALSE, min.gapwidth = 40, ignore.strand = FALSE, with.revmap = FALSE)
# Other merged TSR sets potentially of interest
# 100 ng STRIPE TSRs
stripe_100ng_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$S288C_100ng_1,exp@counts$TSRs$cpm$S288C_100ng_2,exp@counts$TSRs$cpm$S288C_100ng_3),
drop.empty.ranges = FALSE, min.gapwidth = 40, ignore.strand = FALSE, with.revmap = FALSE)
#TSRs from all CAGE methods
all_cage_tsrs_reduced <- GenomicRanges::reduce(unlist(GRangesList(CAGE_TSRs)), drop.empty.ranges = FALSE, min.gapwidth = 40,
ignore.strand = FALSE, with.revmap = FALSE)
#TSRs from STRIPE-seq and CAGE methods
stripe_cage_tsrs_reduced <- GenomicRanges::reduce(c(unlist(GRangesList(CAGE_TSRs)),
exp@counts$TSRs$cpm$S288C_50ng_1,
exp@counts$TSRs$cpm$S288C_50ng_2,
exp@counts$TSRs$cpm$S288C_50ng_3,
exp@counts$TSRs$cpm$S288C_100ng_1,
exp@counts$TSRs$cpm$S288C_100ng_2,
exp@counts$TSRs$cpm$S288C_100ng_3,
exp@counts$TSRs$cpm$S288C_250ng_1,
exp@counts$TSRs$cpm$S288C_250ng_2,
exp@counts$TSRs$cpm$S288C_250ng_3),
drop.empty.ranges = FALSE, min.gapwidth = 40,
ignore.strand = FALSE, with.revmap = FALSE)
samples_for_complexity <- list(exp@experiment$TSSs$S288C_50ng_1,exp@experiment$TSSs$S288C_50ng_2,exp@experiment$TSSs$S288C_50ng_3,
exp@experiment$TSSs$S288C_100ng_1,exp@experiment$TSSs$S288C_100ng_2,exp@experiment$TSSs$S288C_100ng_3,
exp@experiment$TSSs$S288C_250ng_1,exp@experiment$TSSs$S288C_250ng_2,exp@experiment$TSSs$S288C_250ng_3,
exp@experiment$TSSs$SLIC_CAGE_100ng_1,exp@experiment$TSSs$SLIC_CAGE_100ng_2,
exp@experiment$TSSs$nanoCAGE_500ng_1,exp@experiment$TSSs$nanoCAGE_500ng_2,
exp@experiment$TSSs$nanoCAGE_25ng_1,exp@experiment$TSSs$nanoCAGE_25ng_2) %>%
set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
tsr_complexity <- map(samples_for_complexity, ~ countOverlaps(stripe_cage_tsrs_reduced, .x) %>%
as.data.frame %>%
dplyr::rename(., nTSSs = .))
nTSSs <- bind_rows(tsr_complexity, .id = "sample") %>%
gather(key = "sample", value = "nTSSs")
nTSSs <- nTSSs %>%
mutate(log2 = log2(nTSSs + 1)) %>%
mutate(sample = factor(sample, levels=c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")))
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12, hjust = 1)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 16, width = 12)
# Convert complexities to a log2-transformed data frame and plot a correlation heatmap
tsr_complexity_df <- as.data.frame(tsr_complexity)
tsr_complexity_df_log2 <- log2(tsr_complexity_df + 1) %>%
set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
corr_matrix <- cor(tsr_complexity_df_log2, method = "spearman")
pdf(file = "tsr_complexity_hierarchical.pdf", width = 16, height = 16)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "Spearman"),
layer_fun = function(j, i, x, y, width, height, fill){
# since grid.text can also be vectorized
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 16, col = "white"))
})
dev.off()
