# Annotate TSRs
exp <- annotate_features(exp, annotation_file = annotation, data_type = "tsr", feature_type = "transcript")
# Determine TSR distribution relative to genomic features
tsr_distribution <- genomic_distribution(exp, data_type = "tsr", threshold = 3, samples = c("S288C_100ng_1","SLIC_CAGE_100ng_1",
"nanoCAGE_500ng_1","nanoCAGE_25ng_1"))
p <- plot_genomic_distribution(tsr_distribution) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_genomic_distribution.png", plot = p, device = "png", type = "cairo", height = 1.5, width = 4)
########################
### Diamide analysis ###
########################
setwd("/Users/gzentner/Desktop/tsrexplorer/yeast/STRIPE-seq/Gabe_yeast_work/diamide/")
# Normalize TSS counts
exp <- count_normalization(exp, data_type = "tss", n_samples = 1, threshold = 3, samples = diamide)
# Generate a hierarchically clustered heatmap
p <- plot_correlation(exp, data_type = "tss", correlation_plot = "hierarchical", col = viridis(256), correlation_metric = "pearson")
pdf("tss_correlation_hierarchical.pdf", height = 3.5, width = 4)
p
dev.off()
# Annotate TSSs relative to genomic features
exp <- annotate_features(exp, annotation_file = annotation, data_type = "tss", feature_type = "transcript", upstream = 250, downstream = 100)
# Determine TSS distribution relative to genomic features
tss_distribution <- genomic_distribution(exp, data_type = "tss", threshold = 3, samples = c("S288C_100ng_1","S288C_diamide_100ng_1"))
p <- plot_genomic_distribution(tss_distribution) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tss_genomic_distribution.pdf", plot = p, device = cairo_pdf, height = 1.5, width = 4)
# Plot number of promoter-proximal features with a TSS
features <- detect_features(exp, data_type = "tss", feature_type = "transcript", threshold = 3, samples = c("S288C_100ng_1","S288C_diamide_100ng_1"))
p <- plot_detected_features(features, ncol = 3) +
ggplot2::theme(text = element_text(size = 5))
ggsave("tss_feature_plot.pdf", plot = p, device = cairo_pdf, height = 2, width = 3)
# Generate TSS sequence logos
seqs <- tss_sequences(exp, genome_assembly = assembly, threshold = 3, samples = c("S288C_100ng_1","S288C_diamide_100ng_1"))
p <- plot_sequence_logo(seqs, ncol = 1) +
ggplot2::theme(text = element_text(size = 5))
ggsave("tss_seq_logo.pdf", plot = p, device = cairo_pdf, height = 3, width = 2)
# Plot distance of dominant TSS to annotated start codon
dominant <- dominant_tss(exp, threshold = 3, feature_type = "geneId", samples = c("S288C_100ng_1","S288C_diamide_100ng_1"))
p <- plot_dominant_tss(dominant, upstream = 500, downstream = 500)
ggsave("dominant_tss.pdf", plot = p, device = cairo_pdf, height = 4, width = 4)
# Plot hypothetical maximum 5'UTR length
max <- max_utr(exp, threshold = 3, feature_type = "geneId", samples = c("S288C_100ng_1","S288C_diamide_100ng_1"))
p <- plot_max_utr(max)
ggsave("max_utr.pdf", plot = p, device = cairo_pdf, height = 4, width = 4)
# Export normalized TSS bedGraphs
export.bedGraph(exp@counts$TSSs$cpm$S288C_diamide_100ng_1[strand(exp@counts$TSSs$cpm$S288C_diamide_100ng_1) == "+"], "S288C_diamide_100ng_1_+.bedgraph")
export.bedGraph(exp@counts$TSSs$cpm$S288C_diamide_100ng_1[strand(exp@counts$TSSs$cpm$S288C_diamide_100ng_1) == "-"], "S288C_diamide_100ng_1_-.bedgraph")
# Normalize TSR counts
exp <- count_normalization(exp, data_type = "tsr", threshold = 3, n_samples = 1, samples = diamide)
# Generate a hierarchically clustered heatmap
p <- plot_correlation(exp, data_type = "tsr", correlation_plot = "hierarchical", col = viridis(256), correlation_metric = "pearson")
pdf("tsr_correlation_hierarchical.pdf", height = 7, width = 7)
p
dev.off()
# Annotate TSRs
exp <- annotate_features(exp, annotation_file = annotation, data_type = "tsr", feature_type = "transcript")
# Determine TSR distribution relative to genomic features
tsr_distribution <- genomic_distribution(exp, data_type = "tsr", threshold = 3, samples = c("S288C_100ng_1","S288C_diamide_100ng_1"))
p <- plot_genomic_distribution(tsr_distribution) +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_genomic_distribution.png", plot = p, device = "png", type = "cairo", height = 1.5, width = 4)
# Differential TSR (dTSR) analysis
edger_model <- fit_edger_model(
exp,
data_type = "tsr",
samples = c(
"S288C_100ng_1",
"S288C_100ng_2",
"S288C_100ng_3",
"S288C_diamide_100ng_1",
"S288C_diamide_100ng_2",
"S288C_diamide_100ng_3"
),
groups = c(1, 1, 1, 2, 2, 2)
)
diff_tsrs <- differential_expression(edger_model, data_type = "tsr", compare_groups = c(1, 2))
# Write dTSRs to a table
diff_tsrs %>%
filter(log2FC <= -1 & FDR < 0.05 | log2FC >= 1 & FDR < 0.05) %>%
write.table(., "diff_tsrs.tsv", sep="\t", col.names=T, row.names=F, quote=F)
# Annotate dTSRs
annotated_diff_tsrs <- annotate_differential_tsrs(diff_tsrs, annotation_file = annotation, feature_type = "transcript",
upstream = 250, downstream = 100)
# Write annotated significant dTSRs to a table
annotated_diff_tsrs %>%
filter(annotation == "Promoter" & log2FC <= -1 & FDR < 0.05 | annotation == "Promoter" & log2FC >= 1 & FDR < 0.05) %>%
write.table(., "promoter_annotated_diff_tsrs.tsv", sep="\t", col.names=T, row.names=F, quote=F)
# Make a volcano plot of dTSRs
p <- plot_volcano(diff_tsrs, size = 0.1)
ggsave("diff_tsrs_volcano_plot.png", plot = p, device = "png", type = "cairo", height = 2.5, width = 4)
# Perform GO analysis (work in progress)
enrichment_data <- export_for_enrichment(annotated_diff_tsrs)
library(org.Sc.sgd.db)
go_enrichment <- clusterProfiler::compareCluster(
geneId ~ change,
data = enrichment_data,
fun = "enrichGO",
OrgDb = "org.Sc.sgd.db",
pAdjustMethod = "fdr"
)
library(HelloRanges)
setwd("/Users/gzentner/Desktop/tsrexplorer/yeast/STRIPE-seq/Gabe_yeast_work/TSR_complexity/")
# Combine SLIC-CAGE TSRs
slic_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$SLIC_CAGE_100ng_1,exp@counts$TSRs$cpm$SLIC_CAGE_100ng_2),
drop.empty.ranges = FALSE, min.gapwidth = 40, ignore.strand = FALSE, with.revmap = FALSE)
# # Other merged TSR sets potentially of interest
#
# # 100 ng STRIPE TSRs
# stripe_100ng_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$S288C_100ng_1,exp@counts$TSRs$cpm$S288C_100ng_2,exp@counts$TSRs$cpm$S288C_100ng_3),
#                                              drop.empty.ranges = FALSE, min.gapwidth = 40, ignore.strand = FALSE, with.revmap = FALSE)
#
# #TSRs from all CAGE methods
# all_cage_tsrs_reduced <- GenomicRanges::reduce(unlist(GRangesList(CAGE_TSRs)), drop.empty.ranges = FALSE, min.gapwidth = 40,
#                                                ignore.strand = FALSE, with.revmap = FALSE)
#
# #TSRs from STRIPE-seq and CAGE methods
# stripe_cage_tsrs_reduced <- GenomicRanges::reduce(c(unlist(GRangesList(CAGE_TSRs)),
#                                                         exp@counts$TSRs$cpm$S288C_50ng_1,
#                                                         exp@counts$TSRs$cpm$S288C_50ng_2,
#                                                         exp@counts$TSRs$cpm$S288C_50ng_3,
#                                                         exp@counts$TSRs$cpm$S288C_100ng_1,
#                                                         exp@counts$TSRs$cpm$S288C_100ng_2,
#                                                         exp@counts$TSRs$cpm$S288C_100ng_3,
#                                                         exp@counts$TSRs$cpm$S288C_250ng_1,
#                                                         exp@counts$TSRs$cpm$S288C_250ng_2,
#                                                         exp@counts$TSRs$cpm$S288C_250ng_3),
#                                                   drop.empty.ranges = FALSE, min.gapwidth = 40,
#                                                   ignore.strand = FALSE, with.revmap = FALSE)
#
# samples_for_complexity <- list(exp@experiment$TSSs$S288C_50ng_1,exp@experiment$TSSs$S288C_50ng_2,exp@experiment$TSSs$S288C_50ng_3,
#                                exp@experiment$TSSs$S288C_100ng_1,exp@experiment$TSSs$S288C_100ng_2,exp@experiment$TSSs$S288C_100ng_3,
#                                exp@experiment$TSSs$S288C_250ng_1,exp@experiment$TSSs$S288C_250ng_2,exp@experiment$TSSs$S288C_250ng_3,
#                                exp@experiment$TSSs$SLIC_CAGE_100ng_1,exp@experiment$TSSs$SLIC_CAGE_100ng_2,
#                                exp@experiment$TSSs$nanoCAGE_500ng_1,exp@experiment$TSSs$nanoCAGE_500ng_2,
#                                exp@experiment$TSSs$nanoCAGE_25ng_1,exp@experiment$TSSs$nanoCAGE_25ng_2) %>%
#     set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
#                 "S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
#                 "S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
#                 "SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
#                 "nanoCAGE_500ng_1","nanoCAGE_500ng_2",
#                 "nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
tsr_complexity <- map(samples_for_complexity, ~ countOverlaps(slic_tsrs_reduced, .x) %>%
as.data.frame %>%
dplyr::rename(., nTSSs = .))
nTSSs <- bind_rows(tsr_complexity, .id = "sample") %>%
gather(key = "sample", value = "nTSSs")
nTSSs <- nTSSs %>%
mutate(log2 = log2(nTSSs + 1)) %>%
mutate(sample = factor(sample, levels=c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")))
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12, hjust = 1)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 16, width = 12)
# Convert complexities to a log2-transformed data frame and plot a correlation heatmap
tsr_complexity_df <- as.data.frame(tsr_complexity)
tsr_complexity_df_log2 <- log2(tsr_complexity_df + 1) %>%
set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
corr_matrix <- cor(tsr_complexity_df_log2, method = "spearman")
pdf(file = "tsr_complexity_hierarchical.pdf", width = 16, height = 16)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "Spearman"),
layer_fun = function(j, i, x, y, width, height, fill){
# since grid.text can also be vectorized
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 16, col = "white"))})
dev.off()
tsr_complexity <- map(samples_for_complexity, ~ GenomicRanges::countOverlaps(slic_tsrs_reduced, .x) %>%
as.data.frame %>%
dplyr::rename(., nTSSs = .))
library(HelloRanges)
library(ComplexHeatmap)
library(GenomicRanges)
setwd("/Users/gzentner/Desktop/tsrexplorer/yeast/STRIPE-seq/Gabe_yeast_work/TSR_complexity/")
# Combine SLIC-CAGE TSRs
slic_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$SLIC_CAGE_100ng_1,exp@counts$TSRs$cpm$SLIC_CAGE_100ng_2),
drop.empty.ranges = FALSE, min.gapwidth = 40, ignore.strand = FALSE, with.revmap = FALSE)
# # Other merged TSR sets potentially of interest
#
# # 100 ng STRIPE TSRs
# stripe_100ng_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$S288C_100ng_1,exp@counts$TSRs$cpm$S288C_100ng_2,exp@counts$TSRs$cpm$S288C_100ng_3),
#                                              drop.empty.ranges = FALSE, min.gapwidth = 40, ignore.strand = FALSE, with.revmap = FALSE)
#
# #TSRs from all CAGE methods
# all_cage_tsrs_reduced <- GenomicRanges::reduce(unlist(GRangesList(CAGE_TSRs)), drop.empty.ranges = FALSE, min.gapwidth = 40,
#                                                ignore.strand = FALSE, with.revmap = FALSE)
#
# #TSRs from STRIPE-seq and CAGE methods
# stripe_cage_tsrs_reduced <- GenomicRanges::reduce(c(unlist(GRangesList(CAGE_TSRs)),
#                                                         exp@counts$TSRs$cpm$S288C_50ng_1,
#                                                         exp@counts$TSRs$cpm$S288C_50ng_2,
#                                                         exp@counts$TSRs$cpm$S288C_50ng_3,
#                                                         exp@counts$TSRs$cpm$S288C_100ng_1,
#                                                         exp@counts$TSRs$cpm$S288C_100ng_2,
#                                                         exp@counts$TSRs$cpm$S288C_100ng_3,
#                                                         exp@counts$TSRs$cpm$S288C_250ng_1,
#                                                         exp@counts$TSRs$cpm$S288C_250ng_2,
#                                                         exp@counts$TSRs$cpm$S288C_250ng_3),
#                                                   drop.empty.ranges = FALSE, min.gapwidth = 40,
#                                                   ignore.strand = FALSE, with.revmap = FALSE)
#
# samples_for_complexity <- list(exp@experiment$TSSs$S288C_50ng_1,exp@experiment$TSSs$S288C_50ng_2,exp@experiment$TSSs$S288C_50ng_3,
#                                exp@experiment$TSSs$S288C_100ng_1,exp@experiment$TSSs$S288C_100ng_2,exp@experiment$TSSs$S288C_100ng_3,
#                                exp@experiment$TSSs$S288C_250ng_1,exp@experiment$TSSs$S288C_250ng_2,exp@experiment$TSSs$S288C_250ng_3,
#                                exp@experiment$TSSs$SLIC_CAGE_100ng_1,exp@experiment$TSSs$SLIC_CAGE_100ng_2,
#                                exp@experiment$TSSs$nanoCAGE_500ng_1,exp@experiment$TSSs$nanoCAGE_500ng_2,
#                                exp@experiment$TSSs$nanoCAGE_25ng_1,exp@experiment$TSSs$nanoCAGE_25ng_2) %>%
#     set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
#                 "S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
#                 "S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
#                 "SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
#                 "nanoCAGE_500ng_1","nanoCAGE_500ng_2",
#                 "nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
tsr_complexity <- map(samples_for_complexity, ~ countOverlaps(slic_tsrs_reduced, .x) %>%
as.data.frame %>%
dplyr::rename(., nTSSs = .))
nTSSs <- bind_rows(tsr_complexity, .id = "sample") %>%
gather(key = "sample", value = "nTSSs")
nTSSs <- nTSSs %>%
mutate(log2 = log2(nTSSs + 1)) %>%
mutate(sample = factor(sample, levels=c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")))
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12, hjust = 1)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 16, width = 12)
# Convert complexities to a log2-transformed data frame and plot a correlation heatmap
tsr_complexity_df <- as.data.frame(tsr_complexity)
tsr_complexity_df_log2 <- log2(tsr_complexity_df + 1) %>%
set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
corr_matrix <- cor(tsr_complexity_df_log2, method = "spearman")
pdf(file = "tsr_complexity_hierarchical.pdf", width = 16, height = 16)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "Spearman"),
layer_fun = function(j, i, x, y, width, height, fill){
# since grid.text can also be vectorized
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 16, col = "white"))})
dev.off()
library(HelloRanges)
library(ComplexHeatmap)
setwd("/Users/gzentner/Desktop/tsrexplorer/yeast/STRIPE-seq/Gabe_yeast_work/TSR_complexity/")
# Combine SLIC-CAGE TSRs
slic_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$SLIC_CAGE_100ng_1,exp@counts$TSRs$cpm$SLIC_CAGE_100ng_2),
drop.empty.ranges = FALSE, min.gapwidth = 40, ignore.strand = FALSE, with.revmap = FALSE)
# # Other merged TSR sets potentially of interest
#
# # 100 ng STRIPE TSRs
# stripe_100ng_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$S288C_100ng_1,exp@counts$TSRs$cpm$S288C_100ng_2,exp@counts$TSRs$cpm$S288C_100ng_3),
#                                              drop.empty.ranges = FALSE, min.gapwidth = 40, ignore.strand = FALSE, with.revmap = FALSE)
#
# #TSRs from all CAGE methods
# all_cage_tsrs_reduced <- GenomicRanges::reduce(unlist(GRangesList(CAGE_TSRs)), drop.empty.ranges = FALSE, min.gapwidth = 40,
#                                                ignore.strand = FALSE, with.revmap = FALSE)
#
# #TSRs from STRIPE-seq and CAGE methods
# stripe_cage_tsrs_reduced <- GenomicRanges::reduce(c(unlist(GRangesList(CAGE_TSRs)),
#                                                         exp@counts$TSRs$cpm$S288C_50ng_1,
#                                                         exp@counts$TSRs$cpm$S288C_50ng_2,
#                                                         exp@counts$TSRs$cpm$S288C_50ng_3,
#                                                         exp@counts$TSRs$cpm$S288C_100ng_1,
#                                                         exp@counts$TSRs$cpm$S288C_100ng_2,
#                                                         exp@counts$TSRs$cpm$S288C_100ng_3,
#                                                         exp@counts$TSRs$cpm$S288C_250ng_1,
#                                                         exp@counts$TSRs$cpm$S288C_250ng_2,
#                                                         exp@counts$TSRs$cpm$S288C_250ng_3),
#                                                   drop.empty.ranges = FALSE, min.gapwidth = 40,
#                                                   ignore.strand = FALSE, with.revmap = FALSE)
samples_for_complexity <- list(exp@experiment$TSSs$S288C_50ng_1,exp@experiment$TSSs$S288C_50ng_2,exp@experiment$TSSs$S288C_50ng_3,
exp@experiment$TSSs$S288C_100ng_1,exp@experiment$TSSs$S288C_100ng_2,exp@experiment$TSSs$S288C_100ng_3,
exp@experiment$TSSs$S288C_250ng_1,exp@experiment$TSSs$S288C_250ng_2,exp@experiment$TSSs$S288C_250ng_3,
exp@experiment$TSSs$SLIC_CAGE_100ng_1,exp@experiment$TSSs$SLIC_CAGE_100ng_2,
exp@experiment$TSSs$nanoCAGE_500ng_1,exp@experiment$TSSs$nanoCAGE_500ng_2,
exp@experiment$TSSs$nanoCAGE_25ng_1,exp@experiment$TSSs$nanoCAGE_25ng_2) %>%
set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
tsr_complexity <- map(samples_for_complexity, ~ countOverlaps(slic_tsrs_reduced, .x) %>%
as.data.frame %>%
dplyr::rename(., nTSSs = .))
nTSSs <- bind_rows(tsr_complexity, .id = "sample") %>%
gather(key = "sample", value = "nTSSs")
nTSSs <- nTSSs %>%
mutate(log2 = log2(nTSSs + 1)) %>%
mutate(sample = factor(sample, levels=c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")))
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12, hjust = 1)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 16, width = 12)
# Convert complexities to a log2-transformed data frame and plot a correlation heatmap
tsr_complexity_df <- as.data.frame(tsr_complexity)
tsr_complexity_df_log2 <- log2(tsr_complexity_df + 1) %>%
set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
corr_matrix <- cor(tsr_complexity_df_log2, method = "spearman")
pdf(file = "tsr_complexity_hierarchical.pdf", width = 16, height = 16)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "Spearman"),
layer_fun = function(j, i, x, y, width, height, fill){
# since grid.text can also be vectorized
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 16, col = "white"))})
dev.off()
library(ComplexHeatmap)
library(GenomicRanges)
setwd("/Users/gzentner/Desktop/tsrexplorer/yeast/STRIPE-seq/Gabe_yeast_work/TSR_complexity/")
# Combine SLIC-CAGE TSRs
slic_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$SLIC_CAGE_100ng_1,exp@counts$TSRs$cpm$SLIC_CAGE_100ng_2),
drop.empty.ranges = FALSE, min.gapwidth = 40, ignore.strand = FALSE, with.revmap = FALSE)
# # Other merged TSR sets potentially of interest
#
# # 100 ng STRIPE TSRs
# stripe_100ng_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$S288C_100ng_1,exp@counts$TSRs$cpm$S288C_100ng_2,exp@counts$TSRs$cpm$S288C_100ng_3),
#                                              drop.empty.ranges = FALSE, min.gapwidth = 40, ignore.strand = FALSE, with.revmap = FALSE)
#
# #TSRs from all CAGE methods
# all_cage_tsrs_reduced <- GenomicRanges::reduce(unlist(GRangesList(CAGE_TSRs)), drop.empty.ranges = FALSE, min.gapwidth = 40,
#                                                ignore.strand = FALSE, with.revmap = FALSE)
#
# #TSRs from STRIPE-seq and CAGE methods
# stripe_cage_tsrs_reduced <- GenomicRanges::reduce(c(unlist(GRangesList(CAGE_TSRs)),
#                                                         exp@counts$TSRs$cpm$S288C_50ng_1,
#                                                         exp@counts$TSRs$cpm$S288C_50ng_2,
#                                                         exp@counts$TSRs$cpm$S288C_50ng_3,
#                                                         exp@counts$TSRs$cpm$S288C_100ng_1,
#                                                         exp@counts$TSRs$cpm$S288C_100ng_2,
#                                                         exp@counts$TSRs$cpm$S288C_100ng_3,
#                                                         exp@counts$TSRs$cpm$S288C_250ng_1,
#                                                         exp@counts$TSRs$cpm$S288C_250ng_2,
#                                                         exp@counts$TSRs$cpm$S288C_250ng_3),
#                                                   drop.empty.ranges = FALSE, min.gapwidth = 40,
#                                                   ignore.strand = FALSE, with.revmap = FALSE)
samples_for_complexity <- list(exp@experiment$TSSs$S288C_50ng_1,exp@experiment$TSSs$S288C_50ng_2,exp@experiment$TSSs$S288C_50ng_3,
exp@experiment$TSSs$S288C_100ng_1,exp@experiment$TSSs$S288C_100ng_2,exp@experiment$TSSs$S288C_100ng_3,
exp@experiment$TSSs$S288C_250ng_1,exp@experiment$TSSs$S288C_250ng_2,exp@experiment$TSSs$S288C_250ng_3,
exp@experiment$TSSs$SLIC_CAGE_100ng_1,exp@experiment$TSSs$SLIC_CAGE_100ng_2,
exp@experiment$TSSs$nanoCAGE_500ng_1,exp@experiment$TSSs$nanoCAGE_500ng_2,
exp@experiment$TSSs$nanoCAGE_25ng_1,exp@experiment$TSSs$nanoCAGE_25ng_2) %>%
set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
tsr_complexity <- map(samples_for_complexity, ~ countOverlaps(slic_tsrs_reduced, .x) %>%
as.data.frame %>%
dplyr::rename(., nTSSs = .))
nTSSs <- bind_rows(tsr_complexity, .id = "sample") %>%
gather(key = "sample", value = "nTSSs")
nTSSs <- nTSSs %>%
mutate(log2 = log2(nTSSs + 1)) %>%
mutate(sample = factor(sample, levels=c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")))
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12, hjust = 1)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 16, width = 12)
# Convert complexities to a log2-transformed data frame and plot a correlation heatmap
tsr_complexity_df <- as.data.frame(tsr_complexity)
tsr_complexity_df_log2 <- log2(tsr_complexity_df + 1) %>%
set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
corr_matrix <- cor(tsr_complexity_df_log2, method = "spearman")
pdf(file = "tsr_complexity_hierarchical.pdf", width = 16, height = 16)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "Spearman"),
layer_fun = function(j, i, x, y, width, height, fill){
# since grid.text can also be vectorized
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 16, col = "white"))})
dev.off()
# Combine SLIC-CAGE TSRs
slic_tsrs_reduced <- reduce(c(exp@counts$TSRs$cpm$SLIC_CAGE_100ng_1,exp@counts$TSRs$cpm$SLIC_CAGE_100ng_2),
drop.empty.ranges = FALSE, min.gapwidth = 40, ignore.strand = FALSE, with.revmap = FALSE)
?`reduce,GenomicRanges-method`
# Combine SLIC-CAGE TSRs
slic_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$SLIC_CAGE_100ng_1,exp@counts$TSRs$cpm$SLIC_CAGE_100ng_2),
drop.empty.ranges = FALSE, min.gapwidth = 40, ignore.strand = FALSE, with.revmap = FALSE)
exp@counts$TSRs$cpm$SLIC_CAGE_100ng_1
exp@counts$TSRs$cpm
# Normalize TSS counts
exp <- count_normalization(exp, data_type = "tss", n_samples = 1, threshold = 3, samples = all)
# Normalize TSR counts
exp <- count_normalization(exp, data_type = "tsr", threshold = 3, n_samples = 1, samples = all)
# Combine SLIC-CAGE TSRs
slic_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$SLIC_CAGE_100ng_1,exp@counts$TSRs$cpm$SLIC_CAGE_100ng_2),
drop.empty.ranges = FALSE, min.gapwidth = 40, ignore.strand = FALSE, with.revmap = FALSE)
library(ComplexHeatmap)
library(GenomicRanges)
setwd("/Users/gzentner/Desktop/tsrexplorer/yeast/STRIPE-seq/Gabe_yeast_work/TSR_complexity/")
# Combine SLIC-CAGE TSRs
slic_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$SLIC_CAGE_100ng_1,exp@counts$TSRs$cpm$SLIC_CAGE_100ng_2),
drop.empty.ranges = FALSE, min.gapwidth = 40, ignore.strand = FALSE, with.revmap = FALSE)
# # Other merged TSR sets potentially of interest
#
# # 100 ng STRIPE TSRs
# stripe_100ng_tsrs_reduced <- GenomicRanges::reduce(c(exp@counts$TSRs$cpm$S288C_100ng_1,exp@counts$TSRs$cpm$S288C_100ng_2,exp@counts$TSRs$cpm$S288C_100ng_3),
#                                              drop.empty.ranges = FALSE, min.gapwidth = 40, ignore.strand = FALSE, with.revmap = FALSE)
#
# #TSRs from all CAGE methods
# all_cage_tsrs_reduced <- GenomicRanges::reduce(unlist(GRangesList(CAGE_TSRs)), drop.empty.ranges = FALSE, min.gapwidth = 40,
#                                                ignore.strand = FALSE, with.revmap = FALSE)
#
# #TSRs from STRIPE-seq and CAGE methods
# stripe_cage_tsrs_reduced <- GenomicRanges::reduce(c(unlist(GRangesList(CAGE_TSRs)),
#                                                         exp@counts$TSRs$cpm$S288C_50ng_1,
#                                                         exp@counts$TSRs$cpm$S288C_50ng_2,
#                                                         exp@counts$TSRs$cpm$S288C_50ng_3,
#                                                         exp@counts$TSRs$cpm$S288C_100ng_1,
#                                                         exp@counts$TSRs$cpm$S288C_100ng_2,
#                                                         exp@counts$TSRs$cpm$S288C_100ng_3,
#                                                         exp@counts$TSRs$cpm$S288C_250ng_1,
#                                                         exp@counts$TSRs$cpm$S288C_250ng_2,
#                                                         exp@counts$TSRs$cpm$S288C_250ng_3),
#                                                   drop.empty.ranges = FALSE, min.gapwidth = 40,
#                                                   ignore.strand = FALSE, with.revmap = FALSE)
samples_for_complexity <- list(exp@experiment$TSSs$S288C_50ng_1,exp@experiment$TSSs$S288C_50ng_2,exp@experiment$TSSs$S288C_50ng_3,
exp@experiment$TSSs$S288C_100ng_1,exp@experiment$TSSs$S288C_100ng_2,exp@experiment$TSSs$S288C_100ng_3,
exp@experiment$TSSs$S288C_250ng_1,exp@experiment$TSSs$S288C_250ng_2,exp@experiment$TSSs$S288C_250ng_3,
exp@experiment$TSSs$SLIC_CAGE_100ng_1,exp@experiment$TSSs$SLIC_CAGE_100ng_2,
exp@experiment$TSSs$nanoCAGE_500ng_1,exp@experiment$TSSs$nanoCAGE_500ng_2,
exp@experiment$TSSs$nanoCAGE_25ng_1,exp@experiment$TSSs$nanoCAGE_25ng_2) %>%
set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
tsr_complexity <- map(samples_for_complexity, ~ countOverlaps(slic_tsrs_reduced, .x) %>%
as.data.frame %>%
dplyr::rename(., nTSSs = .))
nTSSs <- bind_rows(tsr_complexity, .id = "sample") %>%
gather(key = "sample", value = "nTSSs")
nTSSs <- nTSSs %>%
mutate(log2 = log2(nTSSs + 1)) %>%
mutate(sample = factor(sample, levels=c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2")))
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12, hjust = 1)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 16, width = 12)
# Convert complexities to a log2-transformed data frame and plot a correlation heatmap
tsr_complexity_df <- as.data.frame(tsr_complexity)
tsr_complexity_df_log2 <- log2(tsr_complexity_df + 1) %>%
set_names(c("S288C_50ng_1","S288C_50ng_2","S288C_50ng_3",
"S288C_100ng_1","S288C_100ng_2","S288C_100ng_3",
"S288C_250ng_1","S288C_250ng_2","S288C_250ng_3",
"SLIC_CAGE_100ng_1","SLIC_CAGE_100ng_2",
"nanoCAGE_500ng_1","nanoCAGE_500ng_2",
"nanoCAGE_25ng_1","nanoCAGE_25ng_2"))
corr_matrix <- cor(tsr_complexity_df_log2, method = "spearman")
pdf(file = "tsr_complexity_hierarchical.pdf", width = 16, height = 16)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "Spearman"),
layer_fun = function(j, i, x, y, width, height, fill){
# since grid.text can also be vectorized
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 16, col = "white"))})
dev.off()
exp@experiment$TSRs$SLIC_CAGE_100ng_1
