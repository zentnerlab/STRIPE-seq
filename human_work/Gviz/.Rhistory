####################################
if (!dir.exists(file.path(baseDir, "human_work/CAGE/"))){
print("Creating directory 'human_work/CAGE' and changing working directory...")
dir.create(file.path(baseDir, "human_work/CAGE/"))
setwd(file.path(baseDir, "human_work/CAGE/"))
} else {
print("Directory 'human_work/CAGE' already exists, changing working directory...")
setwd(file.path(baseDir, "human_work/CAGE/"))
}
# Normalize TSS counts
exp <- count_normalization(exp, data_type = "tss", threshold = 3, n_samples = 1, samples = all)
# Annotate TSRs
exp <- annotate_features(exp, annotation_file = file.path(baseDir, "Homo_sapiens.GRCh38.98.gtf"),
data_type = "tss", feature_type = "transcript", upstream = 500, downstream = 500)
# Explore TSS read thresholds for promoter fraction and plot
thresh <- explore_thresholds(exp, annotation_file = file.path(baseDir, "Homo_sapiens.GRCh38.98.gtf"),
feature_type = "transcript", max_threshold = 25,
upstream = 500, downstream = 500, samples = all)
p <- plot_threshold_exploration(thresh, ncol = 3, point_size = 2, sample_order = all) +
ggplot2::geom_vline(xintercept = 3, lty = 2) +
ggplot2::theme(legend.key.size = unit(0.4, "cm"))
ggsave("tss_thresholds.pdf", plot = p, device = cairo_pdf, height = 8, width = 12)
# Determine TSS distribution relative to genomic features
tss_distribution <- genomic_distribution(exp, data_type = "tss", threshold = 3,
samples = all)
p <- plot_genomic_distribution(tss_distribution, sample_order = all) +
ggplot2::theme(text = element_text(size = 6), legend.key.size = unit(0.4, "cm"))
ggsave("tss_genomic_distribution.pdf", plot = p, device = cairo_pdf, height = 2.6, width = 4)
# Plot number of promoter-proximal features with a TSS
features <- detect_features(exp, data_type = "tss", feature_type = "transcript",
samples = all, upstream = 500, downstream = 500)
p <- plot_detected_features(features, ncol = 2) +
ggplot2::theme(text = element_text(size = 5), legend.key.size = unit(0.4, "cm"))
ggsave("tss_feature_plot.pdf", plot = p, device = cairo_pdf, height = 3, width = 4)
# Assess TSS dinucleotide frequencies
frequencies <- dinucleotide_frequencies(exp, genome_assembly = file.path(baseDir, "Homo_sapiens.GRCh38.dna.primary_assembly.fa"),
threshold = 3, samples = all)
p <- plot_dinucleotide_frequencies(frequencies, ncol = 2, sample_order = all) +
ggplot2::theme(text = element_text(size = 6), legend.key.size = unit(0.4, "cm"))
ggsave("tss_dinucleotide_frequencies.pdf", plot = p, device = cairo_pdf, height = 6, width = 4)
# Export normalized TSS bedGraphs
# nanoCAGE-XL
export.bedGraph(exp@counts$TSSs$cpm$nanoCAGE_XL_7.5ug_1[strand(exp@counts$TSSs$cpm$nanoCAGE_XL_7.5ug_1) == "+"],
file.path(baseDir, "human_work/bedgraphs/nanoCAGE_XL_7.5ug_1_+.bedgraph"))
export.bedGraph(exp@counts$TSSs$cpm$nanoCAGE_XL_7.5ug_1[strand(exp@counts$TSSs$cpm$nanoCAGE_XL_7.5ug_1) == "-"],
file.path(baseDir, "human_work/bedgraphs/nanoCAGE_XL_7.5ug_1_-.bedgraph"))
# CAGE
export.bedGraph(exp@counts$TSSs$cpm$CAGE_10ug_1[strand(exp@counts$TSSs$cpm$CAGE_10ug_1) == "+"],
file.path(baseDir, "human_work/bedgraphs/CAGE_10ug_1_+.bedgraph"))
export.bedGraph(exp@counts$TSSs$cpm$CAGE_10ug_1[strand(exp@counts$TSSs$cpm$CAGE_10ug_1) == "-"],
file.path(baseDir, "human_work/bedgraphs/CAGE_10ug_1_-.bedgraph"))
export.bedGraph(exp@counts$TSSs$cpm$CAGE_10ug_2[strand(exp@counts$TSSs$cpm$CAGE_10ug_2) == "+"],
file.path(baseDir, "human_work/bedgraphs/CAGE_10ug_2_+.bedgraph"))
export.bedGraph(exp@counts$TSSs$cpm$CAGE_10ug_2[strand(exp@counts$TSSs$cpm$CAGE_10ug_2) == "-"],
file.path(baseDir, "human_work/bedgraphs/CAGE_10ug_2_-.bedgraph"))
# RAMPAGE
export.bedGraph(exp@counts$TSSs$cpm$RAMPAGE_5ug_1[strand(exp@counts$TSSs$cpm$RAMPAGE_5ug_1) == "+"],
file.path(baseDir, "human_work/bedgraphs/RAMPAGE_5ug_1_+.bedgraph"))
export.bedGraph(exp@counts$TSSs$cpm$RAMPAGE_5ug_1[strand(exp@counts$TSSs$cpm$RAMPAGE_5ug_1) == "-"],
file.path(baseDir, "human_work/bedgraphs/RAMPAGE_5ug_1_-.bedgraph"))
export.bedGraph(exp@counts$TSSs$cpm$RAMPAGE_5ug_2[strand(exp@counts$TSSs$cpm$RAMPAGE_5ug_2) == "+"],
file.path(baseDir, "human_work/bedgraphs/RAMPAGE_5ug_2_+.bedgraph"))
export.bedGraph(exp@counts$TSSs$cpm$RAMPAGE_5ug_2[strand(exp@counts$TSSs$cpm$RAMPAGE_5ug_2) == "-"],
file.path(baseDir, "human_work/bedgraphs/RAMPAGE_5ug_2_-.bedgraph"))
# Normalize TSR counts
exp <- count_normalization(exp, data_type = "tsr", threshold = 3, n_samples = 1, samples = all)
# Generate a combinbed TSR correlation plot
p <- plot_correlation(exp, data_type = "tsr", correlation_metric = "spearman") +
ggplot2::theme_bw() +
ggplot2::theme(text = element_text(size = 6))
ggsave("tsr_correlation.png", plot = p, device = "png", type = "cairo", height = 20, width = 20)
# Generate a hierarchically clustered TSR heatmap with correlation values displayed
corr_matrix <- find_correlation(exp, data_type = "tsr", correlation_metric = "spearman")
cairo_pdf(file = "tsr_correlation_hierarchical.pdf", width = 12, height = 12)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "Spearman"),
layer_fun = function(j, i, x, y, width, height, fill)
{
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 22, col = "white"))
}
)
dev.off()
# # Generate a hierarchically clustered TSS heatmap (no values on plot)
# p <- plot_correlation(exp, data_type = "tsr", correlation_plot = "hierarchical", col = viridis(256),
#                       correlation_metric = "spearman")
#
# cairo_pdf("tsr_correlation_hierarchical.pdf", height = 7, width = 7)
# p
# dev.off()
# Annotate TSRs
exp <- annotate_features(exp, annotation_file = file.path(baseDir, "Homo_sapiens.GRCh38.98.gtf"),
data_type = "tsr", feature_type = "transcript", upstream = 500, downstream = 500)
# Determine TSR distribution relative to genomic features
tsr_distribution <- genomic_distribution(exp, data_type = "tsr", threshold = 3,
samples = all)
p <- plot_genomic_distribution(tsr_distribution, sample_order = all) +
ggplot2::theme(text = element_text(size = 6), legend.key.size = unit(0.4, "cm"))
ggsave("tsr_genomic_distribution.pdf", plot = p, device = cairo_pdf, height = 2.6, width = 4)
# Plot number of promoter-proximal features with a TSR
features <- detect_features(exp, data_type = "tsr", feature_type = "transcript",
samples = all, downstream = 500, upstream = 500)
p <- plot_detected_features(features, ncol = 2) +
ggplot2::theme(text = element_text(size = 5), legend.key.size = unit(0.4, "cm"))
ggsave("tsr_feature_plot.pdf", plot = p, device = cairo_pdf, height = 4, width = 3)
########################
### RNA-seq analysis ###
########################
if (!dir.exists(file.path(baseDir, "human_work/RNA_seq/"))){
print("Creating directory 'human_work/RNA_seq' and changing working directory...")
dir.create(file.path(baseDir, "human_work/RNA_seq/"))
setwd(file.path(baseDir, "human_work/RNA_seq/"))
} else {
print("Directory 'human_work/RNA_seq' already exisits, changing working directory...")
setwd(file.path(baseDir, "human_work/RNA_seq/"))
}
# Get feature counts for STRIPE-seq and RNA-seq
stripe_counts <- read_tsv(file.path(baseDir, "human_data/RNA_seq/cleaned_K562_feature_counts_STRIPEseq.tsv"))
rnaseq_counts <- read_tsv(file.path(baseDir, "human_data/RNA_seq/cleaned_human_feature_counts.tsv"))
stripe_counts <- column_to_rownames(stripe_counts, "Geneid") %>% as.matrix
rnaseq_counts <- column_to_rownames(rnaseq_counts, "Geneid") %>% as.matrix
exp <- add_feature_counts(exp, five_prime_feature_counts = stripe_counts, rnaseq_feature_counts = rnaseq_counts)
exp <- count_normalization(exp, data_type = "features")
# Group samples for analysis
stripe_rnaseq_k562 <- c("GSF2268_s_SP52_K562_WT_100ng",	"GSF2268_s_SP53_K562_WT_100ng", "GSF2268_s_SP54_K562_WT_100ng",
"RNASEQ004_K562_untreated_r1", "RNASEQ005_K562_untreated_r1", "RNASEQ006_K562_untreated_r1")
# Find correlation of YPD STRIPE-seq and RNA-seq feature counts
corr_matrix <- find_correlation(exp, data_type = "features", correlation_metric = "spearman", samples = stripe_rnaseq_k562)
cairo_pdf(file = "tss_rnaseq_correlation_hierarchical.pdf", width = 10, height = 10)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "spearman"),
layer_fun = function(j, i, x, y, width, height, fill)
{
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 22, col = "white"))
}
)
dev.off()
library(GenomicFeatures)
# Set base directory for analyses
baseDir <- "/Users/gzentner/Desktop/tsrexplorer/STRIPE-seq/"
setwd(baseDir)
if (!dir.exists(file.path(baseDir, "human_work/TSR_complexity"))){
print("Creating directory 'human_work/TSR_complexity' and changing working directory...")
dir.create(file.path(baseDir, "human_work/TSR_complexity"))
setwd(file.path(baseDir, "human_work/TSR_complexity/"))
} else {
print("Directory 'human_work/TSR_complexity' already exists, changing working directory...")
setwd(file.path(baseDir, "human_work/TSR_complexity/"))
}
# Get promoter windows
txdb <- makeTxDbFromGFF(file.path(baseDir, "Homo_sapiens.GRCh38.98.gtf"))
promoters <- promoters(genes(txdb), upstream = 500, downstream = 500)
samples_for_complexity <- list(exp@experiment$TSSs$K562_100ng_1,
exp@experiment$TSSs$K562_100ng_2,
exp@experiment$TSSs$K562_100ng_3,
exp@experiment$TSSs$CAGE_10ug_1,
exp@experiment$TSSs$CAGE_10ug_2,
exp@experiment$TSSs$RAMPAGE_5ug_1,
exp@experiment$TSSs$RAMPAGE_5ug_2,
exp@experiment$TSSs$nanoCAGE_XL_7.5ug_1) %>%
set_names(c("K562_100ng_1","K562_100ng_2","K562_100ng_3",
"CAGE_10ug_1","CAGE_10ug_2",
"RAMPAGE_5ug_1","RAMPAGE_5ug_2",
"nanoCAGE_XL_7.5ug_1"))
tsr_complexity <- map(samples_for_complexity, ~ countOverlaps(promoters, .x) %>%
as.data.frame %>%
dplyr::rename(., nTSSs = .))
nTSSs <- bind_rows(tsr_complexity, .id = "sample") %>%
gather(key = "sample", value = "nTSSs")
nTSSs <- nTSSs %>%
mutate(log2 = log2(nTSSs + 1)) %>%
mutate(sample = factor(sample, levels=c("K562_100ng_1","K562_100ng_2","K562_100ng_3",
"CAGE_10ug_1","CAGE_10ug_2",
"RAMPAGE_5ug_1","RAMPAGE_5ug_2",
"nanoCAGE_XL_7.5ug_1")))
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12, hjust = 1)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 12, width = 12)
# Convert complexities to a log2-transformed data frame and plot a correlation heatmap
tsr_complexity_df <- as.data.frame(tsr_complexity)
tsr_complexity_df_log2 <- log2(tsr_complexity_df + 1) %>%
set_names(c("K562_100ng_1","K562_100ng_2","K562_100ng_3",
"CAGE_10ug_1","CAGE_10ug_2",
"RAMPAGE_5ug_1","RAMPAGE_5ug_2",
"nanoCAGE_XL_7.5ug_1"))
corr_matrix <- cor(tsr_complexity_df_log2, method = "spearman")
cairo_pdf(file = "tsr_complexity_hierarchical.pdf", width = 16, height = 16)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "Spearman"),
layer_fun = function(j, i, x, y, width, height, fill)
{
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 16, col = "white"))
}
)
dev.off()
cairo_pdf(file = "tsr_complexity_hierarchical.pdf", width = 16, height = 16)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "Spearman"),
layer_fun = function(j, i, x, y, width, height, fill)
{
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 20, col = "white"))
}
)
dev.off()
cairo_pdf(file = "tsr_complexity_hierarchical.pdf", width = 16, height = 16)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "Spearman"),
layer_fun = function(j, i, x, y, width, height, fill)
{
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 28, col = "white"))
}
)
dev.off()
cairo_pdf(file = "tsr_complexity_hierarchical.pdf", width = 16, height = 16)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "Spearman"),
layer_fun = function(j, i, x, y, width, height, fill)
{
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 34, col = "white"))
}
)
dev.off()
promoters <- promoters(genes(txdb), upstream = 1000, downstream = 1000)
samples_for_complexity <- list(exp@experiment$TSSs$K562_100ng_1,
exp@experiment$TSSs$K562_100ng_2,
exp@experiment$TSSs$K562_100ng_3,
exp@experiment$TSSs$CAGE_10ug_1,
exp@experiment$TSSs$CAGE_10ug_2,
exp@experiment$TSSs$RAMPAGE_5ug_1,
exp@experiment$TSSs$RAMPAGE_5ug_2,
exp@experiment$TSSs$nanoCAGE_XL_7.5ug_1) %>%
set_names(c("K562_100ng_1","K562_100ng_2","K562_100ng_3",
"CAGE_10ug_1","CAGE_10ug_2",
"RAMPAGE_5ug_1","RAMPAGE_5ug_2",
"nanoCAGE_XL_7.5ug_1"))
tsr_complexity <- map(samples_for_complexity, ~ countOverlaps(promoters, .x) %>%
as.data.frame %>%
dplyr::rename(., nTSSs = .))
nTSSs <- bind_rows(tsr_complexity, .id = "sample") %>%
gather(key = "sample", value = "nTSSs")
nTSSs <- nTSSs %>%
mutate(log2 = log2(nTSSs + 1)) %>%
mutate(sample = factor(sample, levels=c("K562_100ng_1","K562_100ng_2","K562_100ng_3",
"CAGE_10ug_1","CAGE_10ug_2",
"RAMPAGE_5ug_1","RAMPAGE_5ug_2",
"nanoCAGE_XL_7.5ug_1")))
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12, hjust = 1)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 12, width = 12)
# Convert complexities to a log2-transformed data frame and plot a correlation heatmap
tsr_complexity_df <- as.data.frame(tsr_complexity)
tsr_complexity_df_log2 <- log2(tsr_complexity_df + 1) %>%
set_names(c("K562_100ng_1","K562_100ng_2","K562_100ng_3",
"CAGE_10ug_1","CAGE_10ug_2",
"RAMPAGE_5ug_1","RAMPAGE_5ug_2",
"nanoCAGE_XL_7.5ug_1"))
corr_matrix <- cor(tsr_complexity_df_log2, method = "spearman")
cairo_pdf(file = "tsr_complexity_hierarchical.pdf", width = 16, height = 16)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "Spearman"),
layer_fun = function(j, i, x, y, width, height, fill)
{
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 34, col = "white"))
}
)
dev.off()
promoters <- promoters(genes(txdb), upstream = 1000, downstream = 250)
samples_for_complexity <- list(exp@experiment$TSSs$K562_100ng_1,
exp@experiment$TSSs$K562_100ng_2,
exp@experiment$TSSs$K562_100ng_3,
exp@experiment$TSSs$CAGE_10ug_1,
exp@experiment$TSSs$CAGE_10ug_2,
exp@experiment$TSSs$RAMPAGE_5ug_1,
exp@experiment$TSSs$RAMPAGE_5ug_2,
exp@experiment$TSSs$nanoCAGE_XL_7.5ug_1) %>%
set_names(c("K562_100ng_1","K562_100ng_2","K562_100ng_3",
"CAGE_10ug_1","CAGE_10ug_2",
"RAMPAGE_5ug_1","RAMPAGE_5ug_2",
"nanoCAGE_XL_7.5ug_1"))
tsr_complexity <- map(samples_for_complexity, ~ countOverlaps(promoters, .x) %>%
as.data.frame %>%
dplyr::rename(., nTSSs = .))
nTSSs <- bind_rows(tsr_complexity, .id = "sample") %>%
gather(key = "sample", value = "nTSSs")
nTSSs <- nTSSs %>%
mutate(log2 = log2(nTSSs + 1)) %>%
mutate(sample = factor(sample, levels=c("K562_100ng_1","K562_100ng_2","K562_100ng_3",
"CAGE_10ug_1","CAGE_10ug_2",
"RAMPAGE_5ug_1","RAMPAGE_5ug_2",
"nanoCAGE_XL_7.5ug_1")))
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12, hjust = 1)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 12, width = 12)
# Convert complexities to a log2-transformed data frame and plot a correlation heatmap
tsr_complexity_df <- as.data.frame(tsr_complexity)
tsr_complexity_df_log2 <- log2(tsr_complexity_df + 1) %>%
set_names(c("K562_100ng_1","K562_100ng_2","K562_100ng_3",
"CAGE_10ug_1","CAGE_10ug_2",
"RAMPAGE_5ug_1","RAMPAGE_5ug_2",
"nanoCAGE_XL_7.5ug_1"))
corr_matrix <- cor(tsr_complexity_df_log2, method = "spearman")
cairo_pdf(file = "tsr_complexity_hierarchical.pdf", width = 16, height = 16)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "Spearman"),
layer_fun = function(j, i, x, y, width, height, fill)
{
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 34, col = "white"))
}
)
dev.off()
promoters <- promoters(genes(TxDb.Hsapiens.UCSC.hg38.knownGene), upstream = 500, downstream = 500)
promoters <- trim(promoters)
chr_names <- seqlevels(promoters)
chr_names <- stringr::str_replace(chr_names, "chr", "")
seqlevels(promoters) <- chr_names
library("TxDb.Hsapiens.UCSC.hg38.knownGene", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
promoters <- promoters(genes(TxDb.Hsapiens.UCSC.hg38.knownGene), upstream = 500, downstream = 500)
promoters <- trim(promoters)
chr_names <- seqlevels(promoters)
chr_names <- stringr::str_replace(chr_names, "chr", "")
seqlevels(promoters) <- chr_names
samples_for_complexity <- list(exp@experiment$TSSs$K562_100ng_1,
exp@experiment$TSSs$K562_100ng_2,
exp@experiment$TSSs$K562_100ng_3,
exp@experiment$TSSs$CAGE_10ug_1,
exp@experiment$TSSs$CAGE_10ug_2,
exp@experiment$TSSs$RAMPAGE_5ug_1,
exp@experiment$TSSs$RAMPAGE_5ug_2,
exp@experiment$TSSs$nanoCAGE_XL_7.5ug_1) %>%
set_names(c("K562_100ng_1","K562_100ng_2","K562_100ng_3",
"CAGE_10ug_1","CAGE_10ug_2",
"RAMPAGE_5ug_1","RAMPAGE_5ug_2",
"nanoCAGE_XL_7.5ug_1"))
tsr_complexity <- map(samples_for_complexity, ~ countOverlaps(promoters, .x) %>%
as.data.frame %>%
dplyr::rename(., nTSSs = .))
nTSSs <- bind_rows(tsr_complexity, .id = "sample") %>%
gather(key = "sample", value = "nTSSs")
nTSSs <- nTSSs %>%
mutate(log2 = log2(nTSSs + 1)) %>%
mutate(sample = factor(sample, levels=c("K562_100ng_1","K562_100ng_2","K562_100ng_3",
"CAGE_10ug_1","CAGE_10ug_2",
"RAMPAGE_5ug_1","RAMPAGE_5ug_2",
"nanoCAGE_XL_7.5ug_1")))
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12, hjust = 1)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 12, width = 12)
# Convert complexities to a log2-transformed data frame and plot a correlation heatmap
tsr_complexity_df <- as.data.frame(tsr_complexity)
tsr_complexity_df_log2 <- log2(tsr_complexity_df + 1) %>%
set_names(c("K562_100ng_1","K562_100ng_2","K562_100ng_3",
"CAGE_10ug_1","CAGE_10ug_2",
"RAMPAGE_5ug_1","RAMPAGE_5ug_2",
"nanoCAGE_XL_7.5ug_1"))
corr_matrix <- cor(tsr_complexity_df_log2, method = "spearman")
cairo_pdf(file = "tsr_complexity_hierarchical.pdf", width = 16, height = 16)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "Spearman"),
layer_fun = function(j, i, x, y, width, height, fill)
{
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 34, col = "white"))
}
)
dev.off()
library(GenomicFeatures)
# Set base directory for analyses
baseDir <- "/Users/gzentner/Desktop/tsrexplorer/STRIPE-seq/"
setwd(baseDir)
if (!dir.exists(file.path(baseDir, "human_work/TSR_complexity"))){
print("Creating directory 'human_work/TSR_complexity' and changing working directory...")
dir.create(file.path(baseDir, "human_work/TSR_complexity"))
setwd(file.path(baseDir, "human_work/TSR_complexity/"))
} else {
print("Directory 'human_work/TSR_complexity' already exists, changing working directory...")
setwd(file.path(baseDir, "human_work/TSR_complexity/"))
}
# Get promoter windows
txdb <- makeTxDbFromGFF(file.path(baseDir, "Homo_sapiens.GRCh38.98.gtf"))
promoters <- promoters(genes(txdb), upstream = 500, downstream = 500)
samples_for_complexity <- list(exp@experiment$TSSs$K562_100ng_1,
exp@experiment$TSSs$K562_100ng_2,
exp@experiment$TSSs$K562_100ng_3,
exp@experiment$TSSs$CAGE_10ug_1,
exp@experiment$TSSs$CAGE_10ug_2,
exp@experiment$TSSs$RAMPAGE_5ug_1,
exp@experiment$TSSs$RAMPAGE_5ug_2,
exp@experiment$TSSs$nanoCAGE_XL_7.5ug_1) %>%
set_names(c("K562_100ng_1","K562_100ng_2","K562_100ng_3",
"CAGE_10ug_1","CAGE_10ug_2",
"RAMPAGE_5ug_1","RAMPAGE_5ug_2",
"nanoCAGE_XL_7.5ug_1"))
tsr_complexity <- map(samples_for_complexity, ~ countOverlaps(promoters, .x) %>%
as.data.frame %>%
dplyr::rename(., nTSSs = .))
nTSSs <- bind_rows(tsr_complexity, .id = "sample") %>%
gather(key = "sample", value = "nTSSs")
nTSSs <- nTSSs %>%
mutate(log2 = log2(nTSSs + 1)) %>%
mutate(sample = factor(sample, levels=c("K562_100ng_1","K562_100ng_2","K562_100ng_3",
"CAGE_10ug_1","CAGE_10ug_2",
"RAMPAGE_5ug_1","RAMPAGE_5ug_2",
"nanoCAGE_XL_7.5ug_1")))
p <- ggplot(nTSSs, aes(x = sample, y = log2)) +
geom_jitter(color = "lightgrey", size = 0.5) +
geom_boxplot(fill = NA, aes(color = sample), outlier.shape = NA) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, size = 12, hjust = 1)) +
scale_fill_viridis_d() +
scale_color_viridis_d()
ggsave("tsr_complexity.png", plot = p, device = "png", type = "cairo", height = 12, width = 12)
# Convert complexities to a log2-transformed data frame and plot a correlation heatmap
tsr_complexity_df <- as.data.frame(tsr_complexity)
tsr_complexity_df_log2 <- log2(tsr_complexity_df + 1) %>%
set_names(c("K562_100ng_1","K562_100ng_2","K562_100ng_3",
"CAGE_10ug_1","CAGE_10ug_2",
"RAMPAGE_5ug_1","RAMPAGE_5ug_2",
"nanoCAGE_XL_7.5ug_1"))
corr_matrix <- cor(tsr_complexity_df_log2, method = "spearman")
cairo_pdf(file = "tsr_complexity_hierarchical.pdf", width = 16, height = 16)
Heatmap(corr_matrix, col = viridis(256), heatmap_legend_param = list(title = "Spearman"),
layer_fun = function(j, i, x, y, width, height, fill)
{
grid.text(sprintf("%.3f", pindex(corr_matrix, i, j)), x, y, gp = gpar(fontsize = 34, col = "white"))
}
)
dev.off()
library(GenomicFeatures)
library(Gviz)
baseDir <- "/Users/gzentner/Desktop/tsrexplorer/STRIPE-seq/"
setwd(baseDir)
if (!dir.exists(file.path(baseDir, "human_work/Gviz/"))){
print("Creating directory 'human_work/Gviz' and changing working directory...")
dir.create(file.path(baseDir, "human_work/Gviz/"))
setwd(file.path(baseDir, "human_work/Gviz/"))
} else {
print("Directory 'human_work/Gviz' already exisits, changing working directory...")
setwd(file.path(baseDir, "human_work/Gviz/"))
}
# Create genomic axis track
axis.track <- GenomeAxisTrack(col="black", scale=0.1, col.range="black")
options(ucscChromosomeNames=FALSE)
# Create gene annotation track
txdb <- makeTxDbFromGFF(file.path(baseDir, "Homo_sapiens.GRCh38.98.gtf"))
genome.track <- GeneRegionTrack(txdb, genome="GRCh38", shape="arrow", names="Genes", col="black",
showId=TRUE, fill="black", trancriptAnnotation="gene_symbol", collapseTranscripts="meta")
# Create data tracks
# STRIPE-seq
K562_100ng_1_pos <- DataTrack(range = file.path(baseDir, "human_work/bedgraphs/K562_100ng_1_+.bedgraph"), genome="GRCh38",
name = "K562 100 ng 1 +", col.histogram = "black", fill.histogram = "black", ylim=c(0, 60))
K562_100ng_1_neg <- DataTrack(range = file.path(baseDir, "human_work/bedgraphs/K562_100ng_1_-.bedgraph"), genome="GRCh38",
name = "K562 100 ng 1 -", col.histogram = "black", fill.histogram = "black", ylim=c(0, 60))
K562_100ng_2_pos <- DataTrack(range = file.path(baseDir, "human_work/bedgraphs/K562_100ng_2_+.bedgraph"), genome="GRCh38",
name = "K562 100 ng 2 +", col.histogram = "black", fill.histogram = "black", ylim=c(0, 60))
K562_100ng_2_neg <- DataTrack(range = file.path(baseDir, "human_work/bedgraphs/K562_100ng_2_-.bedgraph"), genome="GRCh38",
name = "K562 100 ng 2 -", col.histogram = "black", fill.histogram = "black", ylim=c(0, 60))
K562_100ng_3_pos <- DataTrack(range = file.path(baseDir, "human_work/bedgraphs/K562_100ng_3_+.bedgraph"), genome="GRCh38",
name = "K562 100 ng 3 +", col.histogram = "black", fill.histogram = "black", ylim=c(0, 60))
K562_100ng_3_neg <- DataTrack(range = file.path(baseDir, "human_work/bedgraphs/K562_100ng_3_-.bedgraph"), genome="GRCh38",
name = "K562 100 ng 3 -", col.histogram = "black", fill.histogram = "black", ylim=c(0, 60))
# CAGE
CAGE_10ug_1_pos <- DataTrack(range = file.path(baseDir, "human_work/bedgraphs/CAGE_10ug_1_+.bedgraph"), genome="GRCh38",
name = "CAGE 10 ug 1 +", col.histogram = "black", fill.histogram = "black", ylim=c(0, 60))
CAGE_10ug_1_neg <- DataTrack(range = file.path(baseDir, "human_work/bedgraphs/CAGE_10ug_1_-.bedgraph"), genome="GRCh38",
name = "CAGE 10 ug 1 -", col.histogram = "black", fill.histogram = "black", ylim=c(0, 60))
CAGE_10ug_2_pos <- DataTrack(range = file.path(baseDir, "human_work/bedgraphs/CAGE_10ug_2_+.bedgraph"), genome="GRCh38",
name = "CAGE 10 ug 2 +", col.histogram = "black", fill.histogram = "black", ylim=c(0, 60))
CAGE_10ug_2_neg <- DataTrack(range = file.path(baseDir, "human_work/bedgraphs/CAGE_10ug_2_-.bedgraph"), genome="GRCh38",
name = "CAGE 10 ug 2 -", col.histogram = "black", fill.histogram = "black", ylim=c(0, 60))
# RAMPAGE
RAMPAGE_5ug_1_pos <- DataTrack(range = file.path(baseDir, "human_work/bedgraphs/RAMPAGE_5ug_1_+.bedgraph"), genome="GRCh38",
name = "RAMPAGE 10 ug 1 +", col.histogram = "black", fill.histogram = "black", ylim=c(0, 60))
RAMPAGE_5ug_1_neg <- DataTrack(range = file.path(baseDir, "human_work/bedgraphs/RAMPAGE_5ug_1_-.bedgraph"), genome="GRCh38",
name = "RAMPAGE 10 ug 1 -", col.histogram = "black", fill.histogram = "black", ylim=c(0, 60))
RAMPAGE_5ug_2_pos <- DataTrack(range = file.path(baseDir, "human_work/bedgraphs/RAMPAGE_5ug_2_+.bedgraph"), genome="GRCh38",
name = "RAMPAGE 10 ug 2 +", col.histogram = "black", fill.histogram = "black", ylim=c(0, 60))
RAMPAGE_5ug_2_neg <- DataTrack(range = file.path(baseDir, "human_work/bedgraphs/RAMPAGE_5ug_2_-.bedgraph"), genome="GRCh38",
name = "RAMPAGE 10 ug 2 -", col.histogram = "black", fill.histogram = "black", ylim=c(0, 60))
# nanoCAGE-XL
nanoCAGE_XL_7.5ug_1_pos <- DataTrack(range = file.path(baseDir, "human_work/bedgraphs/nanoCAGE_XL_7.5ug_1_+.bedgraph"), genome="GRCh38",
name = "nanoCAGE-XL 7.5 ug +", col.histogram = "black", fill.histogram = "black", ylim=c(0, 60))
nanoCAGE_XL_7.5ug_1_neg <- DataTrack(range = file.path(baseDir, "human_work/bedgraphs/nanoCAGE_XL_7.5ug_1_-.bedgraph"), genome="GRCh38",
name = "nanoCAGE-XL 7.5 ug -", col.histogram = "black", fill.histogram = "black", ylim=c(0, 60))
# STRIPE-seq and CAGE (GAPDH region)
cairo_pdf(file = "tracks.pdf", height = 12, width = 12)
plotTracks(list(axis.track,
K562_100ng_1_pos,
K562_100ng_1_neg,
CAGE_10ug_1_pos,
CAGE_10ug_1_neg,
RAMPAGE_5ug_1_pos,
RAMPAGE_5ug_1_neg,
nanoCAGE_XL_7.5ug_1_pos,
nanoCAGE_XL_7.5ug_1_neg,
genome.track),
chromosome = "12", from = 6484201, to = 6595900,
background.title = "white",
col.title = "black",
col.axis = "black",
type = "histogram",
baseline = 0,
col.baseline = "black")
dev.off()
